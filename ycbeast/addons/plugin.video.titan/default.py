exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MmYgMmM7MzAgMmMuMmUoJzArMmIrMmEvMjcvMmQrNS8yMS8yMy8xMC9iL2EvMS8yMy83KzI1KzIwKzI0KzE2KzI5KzExKzE0K2YrMTIvZC8xYy8xOC8xOS8xZC8yMS8yMy85LzIzLzE1LzgrMjgrZSsxYStjKzFlKzI5KzIyKzFmKzYvMTMrMisxYisxNy8zLzI2LzQ9Jyk=")))(lambda a,b:b[int("0x"+a.group(1),16)],"aW1wb3J0IHVybGxpYix1cmxsaWIyLHJlLHhibWNwbHVnaW4seGJtY2d1aSx1cmxyZXNvbHZlcixzeXMseGJtYyx4Ym1jYWRkb24sb3MsdXJscGFyc2UscmFuZG9tCmZyb20gdDBtbTAuY29tbW9uLmFkZG9uIGltcG9ydCBBZGRvbgpmcm9tIG1ldGFoYW5kbGVyIGltcG9ydCBtZXRhaGFuZGxlcnMKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2FjaGUKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2xpZW50CmZyb20gcmVzb3VyY2VzLmxpYi5yZXNvbHZlcnMgaW1wb3J0IGdvb2dsZXBsdXMKZnJvbSByZXNvdXJjZXMubGliLmxpYnJhcmllcyBpbXBvcnQgY2xvdWRmbGFyZQoKYWRkb25faWQgPSAncGx1Z2luLnZpZGVvLnRpdGFuJwpzZWxmQWRkb24gPSB4Ym1jYWRkb24uQWRkb24oaWQ9YWRkb25faWQpCmFkZG9uID0gQWRkb24oYWRkb25faWQsIHN5cy5hcmd2KQpmYW5hcnQgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkICwgJ2ZhbmFydC5qcGcnKSkKCmljb24gPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnaWNvbi5wbmcnKSkKaWNvbjIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L21tLnBuZycpKQppY29uMyA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvaGlmaS5wbmcnKSkKaWNvbjQgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2ZlYXR1cmVkLnBuZycpKQppY29uNSA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvamljb24ucG5nJykpCmljb242ID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9nMTBpY29uLnBuZycpKQpmYW5hcnRoaWZpID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9oaWZpYmcuanBnJykpCmZhbmFydG1tID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9tbWJnLmpwZycpKQpmYW5hcnRmZWF0dXJlID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9mZWF0dXJlZGJnLmpwZycpKQpmYW5hcnRqID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2FydC9qZmFuYXJ0LmpwZycpKQpmYW5hcnRnMTAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L2ljZWZhbmFydC5qcGVnJykpCnNlYXJjaGljb24gPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnYXJ0L3NlYXJjaC5wbmcnKSkKaWNlaWNvbiA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdhcnQvaWNlLnBuZycpKQptZXRhc2V0ID0gc2VsZkFkZG9uLmdldFNldHRpbmcoJ2VuYWJsZV9tZXRhJykKYWRkb24gPSBBZGRvbihhZGRvbl9pZCwgc3lzLmFyZ3YpCmxpdmV0diA9IFsnLm0zdTgnLCcudHM9JywncnRtcDovLycsJ2lwdHZuYXRpb24nXQpkZWYgQ0FURUdPUklFUygpOgoJYWRkRGlyMignRmVhdHVyZWQgTW92aWVzJywnaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9oaWZpbW92aWVzZG9jcy9IZE1vdmllcy54bWwnLDIxLGljb240LGZhbmFydGZlYXR1cmUpCglhZGREaXIyKCdIaUZpIExpc3RzJywnaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9oaWZpbW92aWVzZG9jcy9tYWluX3BhZ2UueG1sJywxMCxpY29uMyxmYW5hcnRoaWZpKQoJYWRkRGlyMignTSZNcyBBd2Vzb21lIFR2IFN0dWZmJywnaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9OYXZpWFBsYXlsaXN0L3BsYXlsaXN0X21hcmkueG1sJyw2LGljb24yLGZhbmFydG1tKQoJYWRkRGlyMignTWlkbmlnaHQgU29jaWV0eScsJ2h0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3L3FWOWtHNkZrJywzMCxpY29uNSxmYW5hcnRqKQoJYWRkRGlyMignQ29sZCBhcyBJY2UnLCdodHRwOi8vZzEwLngxMGhvc3QuY29tL2NvbGRhc2ljZS9JbmRleC50eHQnLDcsaWNlaWNvbixmYW5hcnRnMTApCgoJYWRkRGlyMignU2VhcmNoIE1vdmllcycsJ2h0dHA6Ly90aXRhbicsOCxzZWFyY2hpY29uLGZhbmFydCkKCXhibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5TZXRWaWV3TW9kZSg1MDApIikKCmRlZiBHMTBJTkRFWCh1cmwsbmFtZSk6CiAgICAgICAgdXJsPXVybC5yZXBsYWNlKCcgJywnJTIwJykKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgCiAgICAgICAgbWF0Y2g9cmUuY29tcGlsZSgnPGxpbms|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LHRodW1iLGZhbmFydG1tKQogICAgICAgIGZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDI6CgkJCWlmICJUdiBTZXJpZXMiIGluIG5hbWU6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDMsdGh1bWIsZmFuYXJ0bW0pCgkJCWVsc2U6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDUsdGh1bWIsZmFuYXJ0bW0pCgpkZWYgUExBWU1PVklFKG5hbWUsdXJsKToKCWlmIi5tM3U4IiBpbiB1cmw6CgkJYWRkb24ucmVzb2x2ZV91cmwodXJsKQoJZWxpZiAiaXB0dm5hdGlvbiIgaW4gdXJsOgoJCSMgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCgkJIyBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQoJCWFkZG9uLnJlc29sdmVfdXJsKHVybCkKCWVsaWYgIi50cz0iIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCgllbGlmICJydG1wOi8vIiBpbiB1cmw6CgkJYWRkb24ucmVzb2x2ZV91cmwodXJsKQkJCgllbGlmICJwb21wYTEubm9zdmlkZW8iIGluIHVybDoKCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCQoJZWxzZToKCQl0cnk6CgkJCXJlc29sdmVkPXVybHJlc29sdmVyLnJlc29sdmUodXJsKQoJCQlhZGRvbi5yZXNvbHZlX3VybChyZXNvbHZlZCkKCQlleGNlcHQ6IAoJCQl0cnk6CgkJCQlzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybCkucmVzb2x2ZSgpCgkJCQlsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0nRGVmYXVsdFZpZGVvLnBuZycsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKCQkJCXhibWMuUGxheWVyICgpLnBsYXkoc3RyZWFtX3VybCxsaXosRmFsc2UpCgkJCWV4Y2VwdDoKCQkJCXRyeToKCQkJCQlmcm9tIHJlc291cmNlcy5saWIgaW1wb3J0IHJlc29sdmVycwoJCQkJCXVybCA9IHJlc29sdmVycy5yZXF1ZXN0KHVybCkKCQkJCQlhZGRvbi5yZXNvbHZlX3VybCh1cmwpCgkJCQlleGNlcHQ6IHBhc3MJCQoJCWFkZExpbmsoJ1ByZXNzIGJhY2sgdG8gZXhpdCcsJycsMSxpY29uLGZhbmFydCkKICAgIApkZWYgY2xlYW5IZXgodGV4dCk6CiAgICBkZWYgZml4dXAobSk6CiAgICAgICAgdGV4dCA9IG0uZ3JvdXAoMCkKICAgICAgICBpZiB0ZXh0WzozXSA9PSAiJiN4IjogcmV0dXJuIHVuaWNocihpbnQodGV4dFszOi0xXSwgMTYpKS5lbmNvZGUoJ3V0Zi04JykKICAgICAgICBlbHNlOiByZXR1cm4gdW5pY2hyKGludCh0ZXh0WzI6LTFdKSkuZW5jb2RlKCd1dGYtOCcpCiAgICByZXR1cm4gcmUuc3ViKCIoP2kpJiNcdys7IiwgZml4dXAsIHRleHQuZGVjb2RlKCdJU08tODg1OS0xJykuZW5jb2RlKCd1dGYtOCcpKQoKZGVmIGdldF9wYXJhbXMoKToKICAgICAgICBwYXJhbT1bXQogICAgICAgIHBhcmFtc3RyaW5nPXN5cy5hcmd2WzJdCiAgICAgICAgaWYgbGVuKHBhcmFtc3RyaW5nKT49MjoKICAgICAgICAgICAgICAgIHBhcmFtcz1zeXMuYXJndlsyXQogICAgICAgICAgICAgICAgY2xlYW5lZHBhcmFtcz1wYXJhbXMucmVwbGFjZSgnPycsJycpCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2xlbihwYXJhbXMpLTFdPT0nLycpOgogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM9cGFyYW1zWzA6bGVuKHBhcmFtcyktMl0KICAgICAgICAgICAgICAgIHBhaXJzb2ZwYXJhbXM9Y2xlYW5lZHBhcmFtcy5zcGxpdCgnJicpCiAgICAgICAgICAgICAgICBwYXJhbT17fQogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHBhaXJzb2ZwYXJhbXMpKToKICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9e30KICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRwYXJhbXM9cGFpcnNvZnBhcmFtc1tpXS5zcGxpdCgnPScpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4oc3BsaXRwYXJhbXMpKT09MjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVtzcGxpdHBhcmFtc1swXV09c3BsaXRwYXJhbXNbMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBwYXJhbQpkZWYgR0VURkVBVFVSRUQodXJsLG5hbWUpOgogICAgICAgIHRyeTpsaW5rID0gb3Blbl91cmwodXJsKQogICAgICAgIGV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCiAgICAgICAgCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|LTE6CgkJCWxpbms9c291cmNlc1tpbmRleF0KCQkJCgkJCXN0cmVhbV91cmwgPSB1cmxyZXNvbHZlci5Ib3N0ZWRNZWRpYUZpbGUobGluaykucmVzb2x2ZSgpCgkJCQoJCQlsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9ZmFuYXJ0X2ltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpOyBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogb3JpZ2luYWxuYW1lIH0gKQoJCQl4Ym1jLlBsYXllciAoKS5wbGF5KHN0cmVhbV91cmwsbGl6LEZhbHNlKQoJZWxzZToJCQoJCXRyeToKCQkJbmFtZT1zZWxmQWRkb24uZ2V0U2V0dGluZygnbmFtZXN0b3JlJykKCQkJcmVzcCA9IHVybGxpYjIudXJsb3Blbih1cmwpCgkJCXVybDIgPSByZXNwLmdldHVybCgpCgoJCQlzdHJlYW1fdXJsID0gdXJscmVzb2x2ZXIuSG9zdGVkTWVkaWFGaWxlKHVybDIpLnJlc29sdmUoKQoJCQlsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9ZmFuYXJ0X2ltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpOyBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogb3JpZ2luYWxuYW1lIH0gKQoJCQl4Ym1jLlBsYXllciAoKS5wbGF5KHN0cmVhbV91cmwsbGl6KQoJCQl4Ym1jcGx1Z2luLnNldFJlc29sdmVkVXJsKGludChzeXMuYXJndlsxXSksIFRydWUsIGxpeikKCQlleGNlcHQ6CgkJCQoJCQlsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9ZmFuYXJ0X2ltYWdlLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpOyBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogb3JpZ2luYWxuYW1lIH0gKQoJCQl4Ym1jLlBsYXllciAoKS5wbGF5KHVybCkKCQkJeGJtY3BsdWdpbi5zZXRSZXNvbHZlZFVybChpbnQoc3lzLmFyZ3ZbMV0pLCBUcnVlLCBsaXopCgkKCWFkZExpbmsoIlByZXNzIEJhY2sgdG8gZXhpdCIsdXJsLCcnLGljb24sZmFuYXJ0KQkJCmRlZiBhZGREaXIyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbj0nJyk6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSsiJmRlc2NyaXB0aW9uPSIrdXJsbGliLnF1b3RlX3BsdXMoZGVzY3JpcHRpb24pCiAgICAgICAgb2s9VHJ1ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUsICdwbG90JzogZGVzY3JpcHRpb24gfSApCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBmYW5hcnQpCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1UcnVlKQogICAgICAgIHJldHVybiBvawoKZGVmIGFkZExpbmsobmFtZSx1cmwsbW9kZSxpY29uaW1hZ2UsZGVzY3JpcHRpb249JycpOgogICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj91cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK3N0cihtb2RlKSsiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSsiJmRlc2NyaXB0aW9uPSIrc3RyKGRlc2NyaXB0aW9uKQogICAgICAgIG9rPVRydWUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSgnZmFuYXJ0X2ltYWdlJywgZmFuYXJ0KQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9RmFsc2UpCiAgICAgICAgcmV0dXJuIG9rCmRlZiBhZGREaXIobmFtZSx1cmwsbW9kZSxpY29uaW1hZ2UsaXRlbWNvdW50LGlzRm9sZGVyPUZhbHNlKToKICAgICAgICB0cnk6CiAgICAgICAgICBpZiBub3QgJ0NPTE9SJyBpbiBuYW1lOgogICAgICAgICAgICBzcGxpdE5hbWU9bmFtZS5wYXJ0aXRpb24oJygnKQogICAgICAgICAgICBzaW1wbGVuYW1lPSIiCiAgICAgICAgICAgIHNpbXBsZXllYXI9IiIKICAgICAgICAgICAgaWYgbGVuKHNwbGl0TmFtZSk|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpCiAgICAgICAgICAgIG9rPVRydWUKICAgICAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPW1ldGFbJ2NvdmVyX3VybCddLCB0aHVtYm5haWxJbWFnZT1tZXRhWydjb3Zlcl91cmwnXSkKICAgICAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz0gbWV0YSApCiAgICAgICAgICAgIGxpei5zZXRQcm9wZXJ0eSgiSXNQbGF5YWJsZSIsInRydWUiKQogICAgICAgICAgICBjb250ZXh0TWVudUl0ZW1zID0gW10KICAgICAgICAgICAgY29udGV4dE1lbnVJdGVtcy5hcHBlbmQoKCdNb3ZpZSBJbmZvcm1hdGlvbicsICdYQk1DLkFjdGlvbihJbmZvKScpKQogICAgICAgICAgICBsaXouYWRkQ29udGV4dE1lbnVJdGVtcyhjb250ZXh0TWVudUl0ZW1zLCByZXBsYWNlSXRlbXM9RmFsc2UpCiAgICAgICAgICAgIGlmIG5vdCBtZXRhWydiYWNrZHJvcF91cmwnXSA9PSAnJzogbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBtZXRhWydiYWNrZHJvcF91cmwnXSkKICAgICAgICAgICAgZWxzZTogbGl6LnNldFByb3BlcnR5KCdmYW5hcnRfaW1hZ2UnLCBmYW5hcnQpCiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9aXNGb2xkZXIsdG90YWxJdGVtcz1pdGVtY291bnQpCiAgICAgICAgICAgIHJldHVybiBvawogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKQogICAgICAgICAgICBvaz1UcnVlCiAgICAgICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lIH0gKQogICAgICAgICAgICBsaXouc2V0UHJvcGVydHkoJ2ZhbmFydF9pbWFnZScsIGZhbmFydCkKICAgICAgICAgICAgbGl6LnNldFByb3BlcnR5KCJJc1BsYXlhYmxlIiwidHJ1ZSIpCiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9aXNGb2xkZXIpCiAgICAgICAgICAgIHJldHVybiBvawpkZWYgcmVnZXhfZ2V0X2FsbCh0ZXh0LCBzdGFydF93aXRoLCBlbmRfd2l0aCk6CiAgICByID0gcmUuZmluZGFsbCgiKD9pKSgiICsgc3RhcnRfd2l0aCArICJbXFNcc10rPyIgKyBlbmRfd2l0aCArICIpIiwgdGV4dCkKICAgIHJldHVybiByCQkJCQoKZGVmIHJlZ2V4X2Zyb21fdG8odGV4dCwgZnJvbV9zdHJpbmcsIHRvX3N0cmluZywgZXhjbHVkaW5nPVRydWUpOgogICAgaWYgZXhjbHVkaW5nOgoJICAgdHJ5OiByID0gcmUuc2VhcmNoKCIoP2kpIiArIGZyb21fc3RyaW5nICsgIihbXFNcc10rPykiICsgdG9fc3RyaW5nLCB0ZXh0KS5ncm91cCgxKQoJICAgZXhjZXB0OiByID0gJycKICAgIGVsc2U6CiAgICAgICB0cnk6IHIgPSByZS5zZWFyY2goIig|IiArIHRvX3N0cmluZyArICIpIiwgdGV4dCkuZ3JvdXAoMSkKICAgICAgIGV4Y2VwdDogciA9ICcnCiAgICByZXR1cm4gciAgICAgICAgCmRlZiBvcGVuX3VybCh1cmwpOgogICAgICAgICMgdXJsPXVybC5yZXBsYWNlKCcgJywnJTIwJykKICAgICAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QodXJsKQogICAgICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tR0I7IHJ2OjEuOS4wLjMpIEdlY2tvLzIwMDgwOTI0MTcgRmlyZWZveC8zLjAuMycpCiAgICAgICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQogICAgICAgIGxpbms9cmVzcG9uc2UucmVhZCgpCiAgICAgICAgcmVzcG9uc2UuY2xvc2UoKQogICAgICAgIHJldHVybiBsaW5rCgpkZWYgc2V0Vmlldyhjb250ZW50LCB2aWV3VHlwZSk6CiAgICBpZiBjb250ZW50OgogICAgICAgIHhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCBjb250ZW50KQogICAgaWYgc2VsZkFkZG9uLmdldFNldHRpbmcoJ2F1dG8tdmlldycpPT0ndHJ1ZSc6CiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIgJSBzZWxmQWRkb24uZ2V0U2V0dGluZyh2aWV3VHlwZSkgKQoKcGFyYW1zPWdldF9wYXJhbXMoKTsgdXJsPU5vbmU7IG5hbWU9Tm9uZTsgbW9kZT1Ob25lOyBzaXRlPU5vbmU7IGljb25pbWFnZT1Ob25lCnRyeTogc2l0ZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sic2l0ZSJdKQpleGNlcHQ6IHBhc3MKdHJ5OiB1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKQpleGNlcHQ6IHBhc3MKdHJ5OiBuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pCmV4Y2VwdDogcGFzcwp0cnk6IG1vZGU9aW50KHBhcmFtc1sibW9kZSJdKQpleGNlcHQ6IHBhc3MKdHJ5OiBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQpleGNlcHQ6IHBhc3MKCnByaW50ICJTaXRlOiAiK3N0cihzaXRlKTsgcHJpbnQgIk1vZGU6ICIrc3RyKG1vZGUpOyBwcmludCAiVVJMOiAiK3N0cih1cmwpOyBwcmludCAiTmFtZTogIitzdHIobmFtZSkKcHJpbnQgcGFyYW1zCgppZiBtb2RlPT1Ob25lIG9yIHVybD09Tm9uZSBvciBsZW4odXJsKTwxOiBDQVRFR09SSUVTKCkKZWxpZiBtb2RlPT0zOiBHRVRTSE9XUyh1cmwsbmFtZSkKZWxpZiBtb2RlPT00OiBHRVRMSVZFKHVybCxuYW1lKQplbGlmIG1vZGU9PTU6IEdFVEVQSVNPREVTKHVybCxuYW1lKQplbGlmIG1vZGU9PTY6IEdFVE1NKHVybCxuYW1lKQplbGlmIG1vZGU9PTc6IEcxMElOREVYKHVybCxuYW1lKQplbGlmIG1vZGU9PTg6IFNFQVJDSCh1cmwsbmFtZSkKZWxpZiBtb2RlPT0xMDogSElGSShuYW1lLHVybCkKCmVsaWYgbW9kZT09MTAxOiBQTEFZTU9WSUUobmFtZSx1cmwpCmVsaWYgbW9kZT09MTAyOiBQTEFZR1ZJREVPKHVybCxuYW1lLG1vZGUsaWNvbmltYWdlKQplbGlmIG1vZGU9PTIxOiBHRVRGRUFUVVJFRCh1cmwsbmFtZSkKZWxpZiBtb2RlPT0zMDogR0VUSkxJU1QodXJsLG5hbWUpCmVsaWYgbW9kZT09MzE6IEdldFN1YmxpbmtzKG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQpCgp4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCgo|JykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciB1cmwsdGh1bWIsbmFtZSBpbiBtYXRjaDoKCQkJaWYgbm90ICdodHRwJyBpbiB0aHVtYjp0aHVtYj1pY29uNgoJCQlpZiAiY29sZGFzaWNlIiBpbiB1cmw6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDcsdGh1bWIsZmFuYXJ0KQoJCQllbHNlOiBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgkJCQkKZGVmIEhJRkkobmFtZSx1cmwpOgogICAgICAgIHRyeTpsaW5rID0gb3Blbl91cmwodXJsKQogICAgICAgIGV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCiAgICAgICAKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXInKS5maW5kYWxsKGxpbmspCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoMjoKCQkJaWYgIlR2IiBpbiBuYW1lOgoJCQkJYWRkRGlyMihuYW1lLHVybCwzLHRodW1iLGZhbmFydGhpZmkpCgkJCWVsc2U6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDUsdGh1bWIsZmFuYXJ0aGlmaSkKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2g6CgkJCWlmICJUdiIgaW4gbmFtZToKCQkJCWFkZERpcjIobmFtZSx1cmwsMyxpY29uMyxmYW5hcnRoaWZpKQoJCQllbHNlOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LGljb24zLGZhbmFydGhpZmkpCgoKZGVmIEdFVExJTktTTkVXKHVybCxuYW1lLGljb25pbWFnZSk6CgkJbnVtVHJpZXMgPSA3CgkJaG9zdCA9IDAKCQl1cmxvcmlnID0gdXJsCgkJb3JpZ2luYWxuYW1lID0gbmFtZQoJCXRyeTpsaW5rID0gb3Blbl91cmwodXJsKQoJCWV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCgkJbWF0Y2hsaW5rPXJlLmNvbXBpbGUoJ2RhdGEtbGluaz0iKC4rPykiPicpLmZpbmRhbGwobGluaykKCQltYXRjaGxpbmsyPXJlLmNvbXBpbGUoIjxhIHN0eWxlPScuKz8nIGhyZWY9JyguKz8pJyB0YXJnZXQ9J19ibGFuayciKS5maW5kYWxsKGxpbmspCgkJZm9yIHVybCBpbiBtYXRjaGxpbms6CgkJCQkJCWhvc3Q9dXJsLnNwbGl0KCcvJylbMl0ucmVwbGFjZSgnd3d3LicsJycpLmNhcGl0YWxpemUoKQoJCQkJCQlhZGRMaW5rKHVybCx1cmwsMTAxLGljb24sJycpCgkJCQkJICAgICAgCmRlZiBHRVRMSVZFKHVybCxuYW1lKToKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgCiAgICAgICAgbWF0Y2g9cmUuY29tcGlsZSgnbmFtZT0oLis|JykKCQkJCWlmIHVybDoKCQkJCQlpZiAic3VibGluayIgaW4gdXJsOgoJCQkJCQlpZiBzdHIoc2VhcmNoX2VudGVyZWQpLnRpdGxlKCkgaW4gbmFtZTphZGREaXIyKG5hbWUrIiAgW0NPTE9SIHllbGxvd11NaWRuaWdodCBTb2NpZXR5Wy9DT0xPUl0iLHVybCwzMSx0aHVtYixmYW5hcnQpCgkJCQkJZWxzZToKCQkJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiB5ZWxsb3ddTWlkbmlnaHQgU29jaWV0eVsvQ09MT1JdIix1cmwsMTAxLHRodW1iLGZhbmFydCkJCQkJCgkJZXhjZXB0OiBwYXNzCgoKCQoJCmRlZiBHZXRTdWJsaW5rcyhuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0KToKICAgIHNvdXJjZXMgPSBbXQogICAgc25hbWUgPSBbXQogICAgbiA9IDAKICAgIGFsbF92aWRlb3MgPSByZWdleF9nZXRfYWxsKHVybCwgJ3N1Ymxpbms6JywgJyMnKQogICAgZm9yIGEgaW4gYWxsX3ZpZGVvczoKCQluID0gbisxCgkJdnVybCA9IGEucmVwbGFjZSgnc3VibGluazonLCcnKS5yZXBsYWNlKCcjJywnJykKCQlzb3VyY2VzLmFwcGVuZCh2dXJsKQoJCXNuYW1lLmFwcGVuZChuYW1lKyAnIFNvdXJjZSBbJytzdHIobikrJ10nKQoJCiAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICBpbmRleCA9IGRpYWxvZy5zZWxlY3QoJ1NlbGVjdCBhIHNvdXJjZTonLCBzbmFtZSkKICAgIGlmIGluZGV4Pi0xOgoJCQl1cmw9c291cmNlc1tpbmRleF0KCQkJdHJ5OgoJCQkJZnJvbSByZXNvdXJjZXMubGliIGltcG9ydCByZXNvbHZlcnMKCQkJCXVybCA9IHJlc29sdmVycy5yZXF1ZXN0KHVybCkKCQkJCXhibWMuUGxheWVyKCkucGxheSh1cmwpCgkJCWV4Y2VwdDoKCQkJCXRyeToKCQkJCQlyZXNvbHZlZD11cmxyZXNvbHZlci5yZXNvbHZlKHVybCkKCQkJCQlhZGRvbi5yZXNvbHZlX3VybChyZXNvbHZlZCkKCQkJCWV4Y2VwdDoKCQkJCQkgc3RyZWFtX3VybCA9IHVybHJlc29sdmVyLkhvc3RlZE1lZGlhRmlsZSh1cmwpLnJlc29sdmUoKQoJCQkJCSBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0nRGVmYXVsdFZpZGVvLnBuZycsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKCQkJCQkgeGJtYy5QbGF5ZXIgKCkucGxheShzdHJlYW1fdXJsLGxpeixGYWxzZSkKCQkKCQkJYWRkTGluaygnUHJlc3MgYmFjayB0byBleGl0JywnJywxLGljb24sZmFuYXJ0KQpkZWYgUExBWUdWSURFTyh1cmwsbmFtZSxtb2RlLGljb25pbWFnZSk6Cglzb3VyY2VzID0gW10KCXNuYW1lID0gW10KCW4gPSAwCglvcmlnaW5hbG5hbWUgPSBuYW1lCglmYW5hcnRfaW1hZ2UgPSBpY29uaW1hZ2UKCWlmICJzdWJsaW5rIiBpbiB1cmw6CgkJbWF0Y2ggPSByZS5jb21waWxlKCc8c3VibGluaz4oLis|KVxuK3BsYXllcicpLmZpbmRhbGwobGluaykKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOiBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCiAgICAgICAgdXJsMiA9ICJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL05hdmlYUGxheWxpc3QvSEQueG1sIgogICAgICAgIHRyeTpsaW5rMiA9IG9wZW5fdXJsKHVybDIpCiAgICAgICAgZXhjZXB0OmxpbmsyID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybDIsIG1vYmlsZT1UcnVlKQogICAgICAgIAogICAgICAgIG1hdGNobT1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKICAgICAgICBtYXRjaG0yPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKICAgICAgICBtYXRjaG0zPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgbWF0Y2htND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNobToKICAgICAgICAgICAgICAgIG5hbWU9cmUuc3ViKHInXC4nLHInICcsIG5hbWUpCiAgICAgICAgICAgICAgICBhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYix0aHVtYikKICAgICAgICBmb3IgbmFtZSx1cmwgaW4gbWF0Y2htMjoKCQkJCWFkZExpbmsobmFtZSx1cmwsMTAxLGljb24sZmFuYXJ0KQogICAgICAgIGZvciBuYW1lLGRhdGUsdXJsIGluIG1hdGNobTM6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaG00OgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQkJCgkJCgkJCQkJCiMjIyMjIyBKT0hOTlkgTElTVFMgIyMjIyMgTkFNRVMgU0VUIFRPIFVSTCBGT1IgUkVTT0xWRVJTIENIRUNLCmRlZiBHRVRKTElTVCh1cmwsbmFtZSk6Cgl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCWV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCglhbGxfbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8Y2hhbm5lbD4nLCAnPC9jaGFubmVsPicpCglmb3IgbGlzdCBpbiBhbGxfbGlua3M6CgkJZGlyID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPGV4dGVybmFsbGluaz4nLCAnPC9leHRlcm5hbGxpbms|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKCQkJCQlmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2g6CgkJCQkJCQluYW1lPXJlLnN1YihyJ1wuJyxyJyAnLCBuYW1lKQoJCQkJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiBwdXJwbGVdTSZNc1svQ09MT1JdIix1cmwsMTAxLHRodW1iLHRodW1iKQoJCQkJCWZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCQkJCQlpZiBzdHIoc2VhcmNoX2VudGVyZWQpLnRpdGxlKCkgaW4gbmFtZTphZGRMaW5rKG5hbWUrIiAgW0NPTE9SIHB1cnBsZV1NJk1zWy9DT0xPUl0iLHVybCwxMDEsaWNvbixmYW5hcnQpCgkJCQkJZm9yIG5hbWUsZGF0ZSx1cmwgaW4gbWF0Y2gzOgoJCQkJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiBwdXJwbGVdTSZNc1svQ09MT1JdIix1cmwsMTAxLGljb24sZmFuYXJ0KQoJCQkJCWZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoNDoKCQkJCQkJCWlmIHN0cihzZWFyY2hfZW50ZXJlZCkudGl0bGUoKSBpbiBuYW1lOmFkZExpbmsobmFtZSsiICBbQ09MT1IgcHVycGxlXU0mTXNbL0NPTE9SXSIsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgkJCQllbHNlOgoJCQkJCWlmIHN0cihzZWFyY2hfZW50ZXJlZCkudGl0bGUoKSBpbiBuYW1lOmFkZExpbmsobmFtZSsiICBbQ09MT1IgcHVycGxlXU0mTXNbL0NPTE9SXSIsdXJsLDEwMSx0aHVtYix0aHVtYikKCQkKCQkJCQoJCWV4Y2VwdDogcGFzcwoJCXRyeToKCQkJdXJsID0gImh0dHA6Ly9nMTAueDEwaG9zdC5jb20vY29sZGFzaWNlL01vdmllcy9Nb3ZpZXMudHh0IgoJCQl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCQkJZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKCQkJbWV0YXNldCA9IHNlbGZBZGRvbi5nZXRTZXR0aW5nKCdlbmFibGVfbWV0YScpCgkJCW1hdGNoPXJlLmNvbXBpbGUoJzxsaW5rPiguKz8pPC9saW5rPjx0aHVtYm5haWw|KVxuK3AnKS5maW5kYWxsKGxpbmsyKQoJCQkJCWZvciBuYW1lLHRodW1iLHVybCBpbiBtYXRjaDoKCQkJCQkJCW5hbWU9cmUuc3ViKHInXC4nLHInICcsIG5hbWUpCgkJCQkJCQlpZiBzdHIoc2VhcmNoX2VudGVyZWQpLnRpdGxlKCkgaW4gbmFtZTphZGRMaW5rKG5hbWUrIiAgW0NPTE9SIHB1cnBsZV1NJk1zWy9DT0xPUl0iLHVybCwxMDEsdGh1bWIsdGh1bWIpCgkJCQkJZm9yIG5hbWUsdXJsIGluIG1hdGNoMjoKCQkJCQkJCWlmIHN0cihzZWFyY2hfZW50ZXJlZCkudGl0bGUoKSBpbiBuYW1lOmFkZExpbmsobmFtZSsiICBbQ09MT1IgcHVycGxlXU0mTXNbL0NPTE9SXSIsdXJsLDEwMSxpY29uLGZhbmFydCkKCQkJCQlmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCQkJCQlpZiBzdHIoc2VhcmNoX2VudGVyZWQpLnRpdGxlKCkgaW4gbmFtZTphZGRMaW5rKG5hbWUrIiAgW0NPTE9SIHB1cnBsZV1NJk1zWy9DT0xPUl0iLHVybCwxMDEsaWNvbixmYW5hcnQpCgkJCQkJZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g0OgoJCQkJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiBwdXJwbGVdTSZNc1svQ09MT1JdIix1cmwsMTAxLHRodW1iLGZhbmFydCkKCQkJCWVsc2U6CgkJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiBwdXJwbGVdTSZNc1svQ09MT1JdIix1cmwsMTAxLHRodW1iLHRodW1iKQoJCQlmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOgoJCQkJaWYgImFyY2hpdmUiIGluIHVybDoKCQkJCQl1cmwyID0gdXJsCgkJCQkJbGluazIgPSBvcGVuX3VybCh1cmwyKQoJCQkJCW1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoND1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKCiAgICAgICAgZm9yIG5hbWUsdGh1bWIsdXJsIGluIG1hdGNoOgogICAgICAgICAgICAgICAgbmFtZT1yZS5zdWIocidcLicscicgJywgbmFtZSkKICAgICAgICAgICAgICAgIGFkZExpbmsobmFtZSx1cmwsMTAxLHRodW1iLHRodW1iKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSxkYXRlLHVybCBpbiBtYXRjaDM6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSxpY29uLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYixkYXRlLHVybCBpbiBtYXRjaDQ6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCQkKCmRlZiBHRVRNTSh1cmwsbmFtZSk6CiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgIAogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHRodW1iLGRhdGUsdXJsIGluIG1hdGNoOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LHRodW1iLGZhbmFydCkKICAgICAgICBmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOgoJCQkJYWRkRGlyMihuYW1lLHVybCw1LHRodW1iLGZhbmFydCkKCmRlZiBHRVRFUElTT0RFUyh1cmwsbmFtZSk6CiAgICAgICAgdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCiAgICAgICAgZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKICAgICAgICAKICAgICAgICBtYXRjaD1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqdGh1bWI9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rKQogICAgICAgIG1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluaykKICAgICAgICBtYXRjaDM9cmUuY29tcGlsZSgnbmFtZT0oLis|JywgJzwvbGluaz4nKQoJCQkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCQkJaWYgdXJsOgoJCQkJCWlmICJzdWJsaW5rIiBpbiB1cmw6CgkJCQkJCWlmIHN0cihzZWFyY2hfZW50ZXJlZCkudGl0bGUoKSBpbiBuYW1lOmFkZERpcjIobmFtZSsiICBbQ09MT1IgeWVsbG93XU1pZG5pZ2h0IFNvY2lldHlbL0NPTE9SXSIsdXJsLDMxLHRodW1iLGZhbmFydCkKCQkJCQllbHNlOgoJCQkJCQlpZiBzdHIoc2VhcmNoX2VudGVyZWQpLnRpdGxlKCkgaW4gbmFtZTphZGRMaW5rKG5hbWUrIiAgW0NPTE9SIHllbGxvd11NaWRuaWdodCBTb2NpZXR5Wy9DT0xPUl0iLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQkJCQkKCQlleGNlcHQ6IHBhc3MJCQoJCXRyeToKCQkJdXJsID0gImh0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3LnBocD9pPXB4eGtjaFFwIgoJCQl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCQkJZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKCQkJaXRlbV9saW5rcyA9IHJlZ2V4X2dldF9hbGwobGluaywgJzxpdGVtPicsICc8L2l0ZW0|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyJykuZmluZGFsbChsaW5rKQoJCQlmb3IgbmFtZSx0aHVtYix1cmwgaW4gbWF0Y2gyOgoJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6CgkJCQkJYWRkTGluayhuYW1lKyIgIFtDT0xPUiBibHVlXUhJRklbL0NPTE9SXSIsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgkJZXhjZXB0OiBwYXNzCgkJdHJ5OgoJCQl1cmwgPSAiaHR0cHM6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9OYXZpWFBsYXlsaXN0L3BsYXlsaXN0X21hcmkueG1sIgoJCQl0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKCQkJZXhjZXB0OmxpbmsgPSBjbG91ZGZsYXJlLnJlcXVlc3QodXJsLCBtb2JpbGU9VHJ1ZSkKCQkJbWV0YXNldCA9IHNlbGZBZGRvbi5nZXRTZXR0aW5nKCdlbmFibGVfbWV0YScpCgkJCW1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|KC4rPyk8L3RpdGxlPicpLmZpbmRhbGwobGluaykKCQkJZm9yIHVybCx0aHVtYixuYW1lIGluIG1hdGNoOgoJCQkJaWYgbm90ICdodHRwJyBpbiB0aHVtYjp0aHVtYj1pY29uNgoJCQkJaWYgc3RyKHNlYXJjaF9lbnRlcmVkKS50aXRsZSgpIGluIG5hbWU6YWRkTGluayhuYW1lKyIgIFtDT0xPUiBncmVlbl1Db2xkIGFzIEljZVsvQ09MT1JdIix1cmwsMTAxLHRodW1iLGZhbmFydCkKCQlleGNlcHQ6IHBhc3MKCgkJdHJ5OgoJCQl1cmwgPSAiaHR0cDovL3Bhc3RlYmluLmNvbS9yYXcucGhwP2k9NVU3Vkh6cVgiCgkJCXRyeTpsaW5rID0gb3Blbl91cmwodXJsKQoJCQlleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQoJCQlpdGVtX2xpbmtzID0gcmVnZXhfZ2V0X2FsbChsaW5rLCAnPGl0ZW0|JywgJzwvdGh1bWJuYWlsPicpCgkJaWYgdXJsOgoJCQlpZiAic3VibGluayIgaW4gdXJsOgoJCQkJYWRkRGlyMihuYW1lLHVybCwzMSx0aHVtYixmYW5hcnQpCgkJCWVsc2U6CgkJCQlhZGRMaW5rKG5hbWUsdXJsLDEwMSx0aHVtYixmYW5hcnQpCgoKZGVmIFNFQVJDSCh1cmwsbmFtZSk6CiAgICBzZWFyY2hfZW50ZXJlZCA9JycKICAgIGtleWJvYXJkID0geGJtYy5LZXlib2FyZChzZWFyY2hfZW50ZXJlZCwgJ1NlYXJjaCBNb3ZpZScpCiAgICBrZXlib2FyZC5kb01vZGFsKCkKICAgIGlmIGtleWJvYXJkLmlzQ29uZmlybWVkKCk6CiAgICAgICAgc2VhcmNoX2VudGVyZWQgPSBrZXlib2FyZC5nZXRUZXh0KCkKCQkKICAgIGlmIGxlbihzZWFyY2hfZW50ZXJlZCk|KVxzKnBsYXllcj0nKS5maW5kYWxsKGxpbmspCiAgICAgICAgbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylccypwbGF5ZXI9JykuZmluZGFsbChsaW5rKQogICAgICAgIGZvciBuYW1lLHVybCBpbiBtYXRjaDI6CgkJCQlhZGREaXIyKG5hbWUsdXJsLDEwMSxpY29uLCcnKQoKZGVmIEdFVFNIT1dTKHVybCxuYW1lKToKICAgICAgICB0cnk6bGluayA9IG9wZW5fdXJsKHVybCkKICAgICAgICBleGNlcHQ6bGluayA9IGNsb3VkZmxhcmUucmVxdWVzdCh1cmwsIG1vYmlsZT1UcnVlKQogICAgICAgIAogICAgICAgIG1hdGNoPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JykKCQl1cmwgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8bGluaz4nLCAnPC9saW5rPicpCgkJdGh1bWIgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGh1bWJuYWlsPicsICc8L3RodW1ibmFpbD4nKQoJCWlmIHVybDoKCQkJaWYgInN1YmxpbmsiIGluIHVybDoKCQkJCWFkZERpcjIobmFtZSx1cmwsMzEsdGh1bWIsZmFuYXJ0KQoJCQllbHNlOgoJCQkJYWRkTGluayhuYW1lLHVybCwxMDEsdGh1bWIsZmFuYXJ0KQoJeW91dHViZV9saW5rcyA9IHJlZ2V4X2dldF9hbGwobGluaywgJzxpdGVtPicsICc8L2l0ZW0|MToKCQl0cnk6CgkJCXVybCA9ICJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2hpZmltb3ZpZXNkb2NzL0hkTW92aWVzLnhtbCIKCQkJdHJ5OmxpbmsgPSBvcGVuX3VybCh1cmwpCgkJCWV4Y2VwdDpsaW5rID0gY2xvdWRmbGFyZS5yZXF1ZXN0KHVybCwgbW9iaWxlPVRydWUpCgkJCW1ldGFzZXQgPSBzZWxmQWRkb24uZ2V0U2V0dGluZygnZW5hYmxlX21ldGEnKQoJCQltYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|KTwvc3VibGluaz4nKS5maW5kYWxsKHVybCkKCQlmb3IgbGlzdCBpbiBtYXRjaDoKCQkJbj1uKzEKCQkJCgkJCXNvdXJjZXMuYXBwZW5kKGxpc3QpCgkJCXNuYW1lLmFwcGVuZChuYW1lKyAnIFNvdXJjZSBbJytzdHIobikrJ10nKQoJCgkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCWluZGV4ID0gZGlhbG9nLnNlbGVjdCgnU2VsZWN0IGEgc291cmNlOicsIHNvdXJjZXMpCgkJaWYgaW5kZXg|JykKCWZvciBsaXN0IGluIHlvdXR1YmVfbGlua3M6CgkJbmFtZSA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aXRsZT4nLCAnPC90aXRsZT4nKQoJCXVybCA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx1dHViZT4nLCAnPC91dHViZT4nKQoJCXVybCA9ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PSIgKyB1cmwKCQl0aHVtYiA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aHVtYm5haWw|KVxuK3AnKS5maW5kYWxsKGxpbmsyKQoJCQkJCW1hdGNoMj1yZS5jb21waWxlKCduYW1lPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCgkJCQkJbWF0Y2gzPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypkYXRlPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCgkJCQkJbWF0Y2g0PXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccyp0aHVtYj0oLis|JywgJzwvdGh1bWJuYWlsPicpCgkJaWYgImlnbm9yZSIgaW4gdXJsOgoJCQlhZGREaXIyKG5hbWUsZGlyLDMwLHRodW1iLGZhbmFydCkKCQkKCWl0ZW1fbGlua3MgPSByZWdleF9nZXRfYWxsKGxpbmssICc8aXRlbT4nLCAnPC9pdGVtPicpCglmb3IgbGlzdCBpbiBpdGVtX2xpbmtzOgoJCW5hbWUgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGl0bGU|MDoKICAgICAgICAgICAgICAgIHNpbXBsZXllYXI9c2ltcGxleWVhclswXQogICAgICAgICAgICBtZyA9IG1ldGFoYW5kbGVycy5NZXRhRGF0YSgpCiAgICAgICAgICAKICAgICAgICAgICAgbWV0YSA9IG1nLmdldF9tZXRhKCdtb3ZpZScsIG5hbWU9c2ltcGxlbmFtZSAseWVhcj1zaW1wbGV5ZWFyKQogICAgICAgICAgICB1PXN5cy5hcmd2WzBdKyI|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcGxheWVyPScpLmZpbmRhbGwobGluaykKCQkJZm9yIG5hbWUsdGh1bWIsZGF0ZSx1cmwgaW4gbWF0Y2g6CgkJCQlpZiAiYXJjaGl2ZSIgaW4gdXJsOgoJCQkJCXVybDIgPSB1cmwKCQkJCQlsaW5rMiA9IG9wZW5fdXJsKHVybDIpCgkJCQkJbWF0Y2g9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKnRodW1iPSguKz8pXHMqVVJMPSguKz8pXG4rcCcpLmZpbmRhbGwobGluazIpCgkJCQkJbWF0Y2gyPXJlLmNvbXBpbGUoJ25hbWU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKCQkJCQltYXRjaDM9cmUuY29tcGlsZSgnbmFtZT0oLis|JywgJzwvaXRlbT4nKQoJCQlmb3IgbGlzdCBpbiBpdGVtX2xpbmtzOgoJCQkJbmFtZSA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aXRsZT4nLCAnPC90aXRsZT4nKQoJCQkJdXJsID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPGxpbms|MDoKICAgICAgICAgICAgICAgIHNpbXBsZW5hbWU9c3BsaXROYW1lWzBdCiAgICAgICAgICAgICAgICBzaW1wbGV5ZWFyPXNwbGl0TmFtZVsyXS5wYXJ0aXRpb24oJyknKQogICAgICAgICAgICBpZiBsZW4oc2ltcGxleWVhcik|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwbGF5ZXI9JykuZmluZGFsbChsaW5rKQoJCQltYXRjaDI9cmUuY29tcGlsZSgnbmFtZT0oLis|KVxzKmRhdGU9KC4rPylccypVUkw9KC4rPylcbitwJykuZmluZGFsbChsaW5rMikKCQkJCQltYXRjaDQ9cmUuY29tcGlsZSgnbmFtZT0oLis|JykKCQkJZm9yIGxpc3QgaW4gaXRlbV9saW5rczoKCQkJCW5hbWUgPSByZWdleF9mcm9tX3RvKGxpc3QsICc8dGl0bGU|JykKCQkJCXRodW1iID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPHRodW1ibmFpbD4nLCAnPC90aHVtYm5haWw|JywgJzwvbmFtZT4nKQoJCXVybCA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxsaW5rPicsICc8L2xpbms|KVxzKnRodW1iPSguKz8pXHMqZGF0ZT0oLis|JykKCQkJCXVybCA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzxsaW5rPicsICc8L2xpbms|KVxzKlVSTD0oLis|JykKCQl0aHVtYiA9IHJlZ2V4X2Zyb21fdG8obGlzdCwgJzx0aHVtYm5haWw|JykKCQluYW1lID0gcmVnZXhfZnJvbV90byhsaXN0LCAnPG5hbWU|aSkoIiArIGZyb21fc3RyaW5nICsgIltcU1xzXSs|KTwvdGh1bWJuYWlsPjx0aXRsZT4oLis|KC4rPyk8L3RodW1ibmFpbD48dGl0bGU|JywgJzwvdGl0bGU|PHRodW1ibmFpbD4oLis|KC4rPyk8L2xpbms|base64|KTwvdGl0bGU|b64decode|import|exec".split("|")))